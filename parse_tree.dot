(startRule (compilationUnit (programUnit (identificationDivision IDENTIFICATION DIVISION .\n        (programIdParagraph PROGRAM-ID .    (programName (cobolWord DOGECOIN)) .\n       ) (identificationDivisionBody (authorParagraph AUTHOR. SOLDIER OF FORTRAN.\n       )) (identificationDivisionBody (authorParagraph INSTALLATION. DOGE BANK.\n       )) (identificationDivisionBody (authorParagraph DATE-WRITTEN. 08/30/20.\n       )) (identificationDivisionBody (authorParagraph SECURITY. CONFIDENTIAL.\n       ))) (environmentDivision ENVIRONMENT DIVISION .\n       ) (dataDivision DATA DIVISION .\n        (dataDivisionSection (workingStorageSection WORKING-STORAGE SECTION .\n       (dataDescriptionEntry (dataDescriptionEntryFormat1 77 (dataName (cobolWord RC)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 4)) (pictureChars )))) (dataUsageClause COMP) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (numericLiteral (integerLiteral +0)))))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 77 (dataName (cobolWord SYSOUT-TOKEN)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n      )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord DOGEMSG)) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DOGEID)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )) (pictureChars B))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal 'DOGECICS99')))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord ADDRSS)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 34)) (pictureChars )) (pictureChars B))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord AMOUNT)) (dataPictureClause PIC (pictureString (pictureChars Z) (pictureChars () (pictureChars (integerLiteral 02)) (pictureChars )) (pictureChars ,) (pictureChars Z) (pictureChars () (pictureChars (integerLiteral 03)) (pictureChars )) (pictureChars ,) (pictureChars Z) (pictureChars () (pictureChars (integerLiteral 02)) (pictureChars )) (pictureChars 9.9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord DOGEMSG-LEN)) (dataPictureClause PIC (pictureString (pictureChars (integerLiteral 99)))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (numericLiteral (integerLiteral 61)))))) .\n      )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord TRANSACTION)) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord TDATE)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord NUM-DATE)) (dataRedefinesClause REDEFINES (dataName (cobolWord TDATE))) (dataPictureClause PIC (pictureString (pictureChars (integerLiteral 9)) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord TADDRSS)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 34)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord TLABEL)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord TAMOUNT)) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat1 10 (dataName (cobolWord TAMT-SIGN)) (dataPictureClause PIC (pictureString (pictureChars X))) .\n                   )) (dataDescriptionEntry (dataDescriptionEntryFormat3 88 (conditionName (cobolWord TAMT-SIGN-POSITIVE)) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal '+')))) .\n                   )) (dataDescriptionEntry (dataDescriptionEntryFormat3 88 (conditionName (cobolWord TAMT-SIGN-NEGATIVE)) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal '-')))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat1 10 (dataName (cobolWord TAMT-INTEGER-PART)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat1 10 (dataName (cobolWord TAMT-DEC-POINT)) (dataPictureClause PIC (pictureString (pictureChars X))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat1 10 (dataName (cobolWord TAMT-DECIMAL-PART)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord THE-AMOUNT)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )) (pictureChars V9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 FILLER (dataRedefinesClause REDEFINES (dataName (cobolWord THE-AMOUNT))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord THE-AMOUNT-INTEGER)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord THE-AMOUNT-DECIMAL)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord AVAILABLE-AMOUNT)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )) (pictureChars V9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord RECENT-COLOR)) (dataPictureClause PIC (pictureString (pictureChars X))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord DISPLAY-TRAN)) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DDATE)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DLABEL)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DSIGN)) (dataPictureClause PIC (pictureString (pictureChars X))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DAMOUNT)) (dataPictureClause PIC (pictureString (pictureChars Z) (pictureChars () (pictureChars (integerLiteral 02)) (pictureChars )) (pictureChars ,) (pictureChars Z) (pictureChars () (pictureChars (integerLiteral 03)) (pictureChars )) (pictureChars ,) (pictureChars Z) (pictureChars () (pictureChars (integerLiteral 02)) (pictureChars )) (pictureChars 9.9) (pictureChars () (pictureChars (integerLiteral 8)) (pictureChars )))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DTYPE)) (dataPictureClause PIC (pictureString (pictureChars XXXX))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal 'DOGE')))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord TEMP-DATE)) (dataPictureClause PIC (pictureString (pictureChars (integerLiteral 9)) (pictureChars () (pictureChars (integerLiteral 15)) (pictureChars )))) (dataUsageClause COMP-3) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord DOGEMSG-LEN)) (dataPictureClause PIC (pictureString (pictureChars (integerLiteral 99)))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (numericLiteral (integerLiteral 61)))))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord START-RECORD-ID)) (dataPictureClause PIC (pictureString (pictureChars (integerLiteral 9)) (pictureChars () (pictureChars (integerLiteral 10)) (pictureChars )))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (numericLiteral (integerLiteral 9999999999)))))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord SINCE-EPOCH)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 15)) (pictureChars )))) (dataUsageClause COMP-3) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (numericLiteral (integerLiteral +2208988800000)))))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord RESPONSE-CODE)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 4)) (pictureChars )))) (dataUsageClause COMP) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord RESPONSE-CODE2)) (dataPictureClause PIC (pictureString (pictureChars S9) (pictureChars () (pictureChars (integerLiteral 4)) (pictureChars )))) (dataUsageClause COMP) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord DOGECOMMS-AREA)) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 (dataName (cobolWord DOGE-FLAG)) (dataPictureClause PIC (pictureString (pictureChars X))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat3 88 (conditionName (cobolWord SUCH-DOGE)) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal 'D')))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat3 88 (conditionName (cobolWord WOW-MENU)) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal 'W')))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat3 88 (conditionName (cobolWord SUCH-SEND)) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal 'S')))) .\n               )) (dataDescriptionEntry (dataDescriptionEntryFormat3 88 (conditionName (cobolWord SUCH-HISTORY)) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal 'T')))) .\n           )) (dataDescriptionEntry (dataDescriptionEntryFormat1 05 FILLER (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 9)) (pictureChars )))) .\n       )) (dataDescriptionEntry (dataDescriptionEntryFormat1 01 (dataName (cobolWord WTO-MESSAGE)) (dataPictureClause PIC (pictureString (pictureChars X) (pictureChars () (pictureChars (integerLiteral 38)) (pictureChars )))) (dataValueClause VALUE (dataValueInterval (dataValueIntervalFrom (literal (figurativeConstant SPACES))))) .\n      ))))))) COPY DOGECN .\n        COPY DOGEMN .\n        COPY DFHAID .\n        COPY DFHBMSCA .\n        LINKAGE SECTION .\n       01 DFHCOMMAREA PIC X ( 10 ) .\n       PROCEDURE DIVISION .\n        00000-MAIN .\n       IF EIBCALEN > ZERO THEN MOVE DFHCOMMAREA TO DOGECOMMS-AREA .\n       IF EIBCALEN EQUAL TO ZERO OR SUCH-DOGE MOVE 'STARTING DOGE CICS.' TO WTO-MESSAGE PERFORM DOGE-WTO MOVE 'DISPLAYING DOGE.' TO WTO-MESSAGE PERFORM DOGE-WTO EXEC CICS SEND MAP ( 'DOGECN1' ) MAPSET ( 'DOGECN' ) ERASE END-EXEC ELSE IF EIBAID EQUAL TO DFHPF3 EXEC CICS XCTL PROGRAM ( 'DOGEQUIT' ) END-EXEC ELSE IF EIBAID EQUAL TO DFHPF5 PERFORM DOGE-MAIN-SCREEN ELSE IF WOW-MENU MOVE 'T' TO DOGECOMMS-AREA PERFORM DOGE-MAIN-SCREEN ELSE IF EIBAID EQUAL TO DFHENTER PERFORM RECEIVE-OPTION PERFORM PARSE-OPTION .\n            EXEC CICS RETURN TRANSID ( 'DOGE' ) COMMAREA ( DOGECOMMS-AREA ) END-EXEC .\n        DOGE-EXIT .\n            GOBACK .\n       RECEIVE-OPTION .\n       MOVE 'Getting Input from User.' TO WTO-MESSAGE .\n            PERFORM DOGE-WTO .\n            EXEC CICS RECEIVE MAP ( 'DOGEMN1' ) MAPSET ( 'DOGEMN' ) INTO ( DOGEMN1I ) END-EXEC .\n\n        PARSE-OPTION .\n       IF OPTIONI EQUAL TO 'T' OR OPTIONI EQUAL TO 'M' MOVE 'Opening Transaction History' TO WTO-MESSAGE PERFORM DOGE-WTO EXEC CICS XCTL PROGRAM ( 'DOGETRAN' ) END-EXEC ELSE IF OPTIONI EQUAL TO 'W' MOVE 'Opening Main Menu' TO WTO-MESSAGE PERFORM DOGE-WTO EXEC CICS XCTL PROGRAM ( 'DOGECOIN' ) END-EXEC ELSE IF OPTIONI EQUAL TO 'D' MOVE 'Opening Transaction Details' TO WTO-MESSAGE PERFORM DOGE-WTO EXEC CICS XCTL PROGRAM ( 'DOGEDEET' ) END-EXEC ELSE IF OPTIONI EQUAL TO 'S' MOVE 'Opening Such Send' TO WTO-MESSAGE PERFORM DOGE-WTO EXEC CICS XCTL PROGRAM ( 'DOGESEND' ) END-EXEC .\n            MOVE SPACES TO WTO-MESSAGE .\n\n        DOGE-MAIN-SCREEN .\n       MOVE 'Sending Doge CICS Main Screen.' TO WTO-MESSAGE .\n            PERFORM DOGE-WTO .\n            EXEC CICS STARTBR FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) END-EXEC .\n       EXEC CICS READPREV FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) INTO ( TRANSACTION ) END-EXEC .\n       EXEC CICS READPREV FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) INTO ( TRANSACTION ) END-EXEC .\n            PERFORM CONVERT-DATE .\n            MOVE TLABEL TO DLABEL .\n            PERFORM CONVERT-AMOUNT-TO-DISPLAY .\n            MOVE RECENT-COLOR TO RECNT2C .\n            MOVE DISPLAY-TRAN TO RECNT2O .\n       EXEC CICS READPREV FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) INTO ( TRANSACTION ) END-EXEC .\n            PERFORM CONVERT-DATE .\n            MOVE TLABEL TO DLABEL .\n            PERFORM CONVERT-AMOUNT-TO-DISPLAY .\n            MOVE RECENT-COLOR TO RECNT1C .\n       IF TDATE = 0000000002 MOVE RECNT2O TO RECNT1O MOVE SPACES TO RECNT1O ELSE MOVE DISPLAY-TRAN TO RECNT1O .\n       MOVE 0000000001 TO START-RECORD-ID .\n            EXEC CICS RESETBR FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) END-EXEC .\n       EXEC CICS READNEXT FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) INTO ( TRANSACTION ) END-EXEC .\n       PERFORM CONVERT-AMOUNT-TO-DISPLAY .\n            MOVE THE-AMOUNT TO AVAILABLE-AMOUNT .\n            MOVE THE-AMOUNT TO AVAILO .\n       EXEC CICS READNEXT FILE ( 'DOGEVSAM' ) RIDFLD ( START-RECORD-ID ) INTO ( TRANSACTION ) END-EXEC .\n            PERFORM CONVERT-AMOUNT-TO-DISPLAY .\n            MOVE THE-AMOUNT TO PENDNGO .\n            ADD AVAILABLE-AMOUNT TO THE-AMOUNT .\n            MOVE THE-AMOUNT TO TOTALO .\n       EXEC CICS ENDBR FILE ( 'DOGEVSAM' ) END-EXEC .\n\n            EXEC CICS SEND MAP ( 'DOGEMN1' ) MAPSET ( 'DOGEMN' ) ERASE END-EXEC .\n       CONVERT-AMOUNT-TO-DISPLAY .\n       MOVE DFHGREEN TO RECENT-COLOR .\n            MOVE TAMT-INTEGER-PART TO THE-AMOUNT-INTEGER .\n            MOVE TAMT-DECIMAL-PART TO THE-AMOUNT-DECIMAL .\n            IF TAMT-SIGN-NEGATIVE MOVE DFHRED TO RECENT-COLOR SUBTRACT THE-AMOUNT FROM ZERO GIVING THE-AMOUNT .\n            MOVE THE-AMOUNT TO DAMOUNT .\n            MOVE TAMT-SIGN TO DSIGN .\n       CONVERT-DATE .\n       MOVE NUM-DATE TO TEMP-DATE .\n            MULTIPLY 1000 BY TEMP-DATE .\n            ADD SINCE-EPOCH TO TEMP-DATE .\n            EXEC CICS FORMATTIME ABSTIME ( TEMP-DATE ) DATESEP ( '/' ) MMDDYYYY ( DDATE ) END-EXEC .\n       DOGE-WTO .\n            EXEC CICS WRITE OPERATOR TEXT ( WTO-MESSAGE ) END-EXEC .\n            MOVE SPACES TO WTO-MESSAGE .)