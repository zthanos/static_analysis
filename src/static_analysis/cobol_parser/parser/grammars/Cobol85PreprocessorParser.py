# Generated from ./grammars/Cobol85Preprocessor.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,292,678,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,5,0,73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,1,1,1,3,1,
        82,8,1,1,1,1,1,4,1,86,8,1,11,1,12,1,87,1,2,1,2,1,2,1,2,3,2,94,8,
        2,1,2,5,2,97,8,2,10,2,12,2,100,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,124,
        8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,149,8,3,1,3,3,3,152,8,3,1,3,
        3,3,155,8,3,1,3,3,3,158,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,178,8,3,1,3,1,3,1,3,1,3,
        1,3,1,3,3,3,186,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,3,3,218,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,226,8,3,1,3,
        1,3,1,3,1,3,3,3,232,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,3,3,249,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        322,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        337,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,359,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,3,3,369,8,3,1,3,1,3,1,3,1,3,3,3,375,8,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,391,8,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,3,3,400,8,3,1,3,3,3,403,8,3,1,3,3,3,406,8,3,1,3,3,3,
        409,8,3,1,3,3,3,412,8,3,1,3,3,3,415,8,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,435,8,3,1,3,
        3,3,438,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,446,8,3,1,4,1,4,1,4,1,4,
        1,4,3,4,453,8,4,1,5,1,5,1,5,1,5,1,5,3,5,460,8,5,1,6,1,6,1,6,1,6,
        1,6,3,6,467,8,6,1,7,1,7,1,7,5,7,472,8,7,10,7,12,7,475,9,7,1,7,1,
        7,1,7,1,7,3,7,481,8,7,5,7,483,8,7,10,7,12,7,486,9,7,1,7,5,7,489,
        8,7,10,7,12,7,492,9,7,1,7,1,7,1,8,1,8,1,8,3,8,499,8,8,1,8,1,8,3,
        8,503,8,8,1,9,1,9,3,9,507,8,9,1,10,1,10,5,10,511,8,10,10,10,12,10,
        514,9,10,1,10,1,10,4,10,518,8,10,11,10,12,10,519,1,10,5,10,523,8,
        10,10,10,12,10,526,9,10,1,11,1,11,1,11,5,11,531,8,11,10,11,12,11,
        534,9,11,1,11,3,11,537,8,11,1,12,1,12,5,12,541,8,12,10,12,12,12,
        544,9,12,1,12,4,12,547,8,12,11,12,12,12,548,1,12,1,12,1,13,1,13,
        1,13,1,13,1,14,1,14,5,14,559,8,14,10,14,12,14,562,9,14,1,14,1,14,
        5,14,566,8,14,10,14,12,14,569,9,14,1,14,1,14,5,14,573,8,14,10,14,
        12,14,576,9,14,1,14,3,14,579,8,14,1,14,5,14,582,8,14,10,14,12,14,
        585,9,14,1,14,3,14,588,8,14,1,15,1,15,5,15,592,8,15,10,15,12,15,
        595,9,15,1,15,1,15,3,15,599,8,15,1,16,1,16,5,16,603,8,16,10,16,12,
        16,606,9,16,1,16,1,16,3,16,610,8,16,1,17,1,17,1,17,1,17,3,17,616,
        8,17,1,18,1,18,1,18,1,18,3,18,622,8,18,1,19,1,19,3,19,626,8,19,1,
        20,1,20,3,20,630,8,20,1,21,1,21,1,21,3,21,635,8,21,1,22,1,22,3,22,
        639,8,22,1,22,1,22,1,23,1,23,4,23,645,8,23,11,23,12,23,646,1,24,
        1,24,1,24,1,24,4,24,653,8,24,11,24,12,24,654,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,4,25,664,8,25,11,25,12,25,665,1,26,1,26,3,26,670,
        8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,0,0,30,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        0,83,2,0,16,16,216,216,1,0,7,8,4,0,23,23,59,59,268,268,270,270,1,
        0,13,14,2,0,22,22,26,26,2,0,24,24,268,268,1,0,30,31,2,0,33,33,41,
        41,2,0,62,62,139,139,2,0,184,184,253,253,2,0,37,37,269,269,2,0,38,
        38,42,42,1,0,43,44,1,0,45,46,1,0,57,58,2,0,60,60,64,64,2,0,62,62,
        271,271,3,0,270,270,273,273,277,279,1,0,272,274,6,0,35,35,101,101,
        241,241,269,269,275,275,277,277,2,0,4,4,80,80,1,0,74,75,4,0,29,29,
        50,51,71,73,255,255,2,0,76,76,82,82,1,0,93,94,4,0,24,24,108,108,
        112,112,268,268,2,0,3,3,105,105,3,0,29,29,50,50,73,73,2,0,108,108,
        112,112,3,0,270,270,277,277,279,279,1,0,114,115,2,0,117,117,126,
        126,2,0,116,116,121,121,1,0,124,125,2,0,122,122,127,127,1,0,128,
        129,1,0,134,135,2,0,137,137,142,142,2,0,136,136,139,139,1,0,150,
        151,1,0,153,154,1,0,155,156,1,0,157,158,1,0,160,161,2,0,170,170,
        179,179,2,0,167,167,171,171,1,0,174,175,1,0,176,177,1,0,180,181,
        1,0,186,187,2,0,191,191,193,193,2,0,34,34,98,99,1,0,188,189,1,0,
        194,195,3,0,95,95,164,164,212,212,1,0,197,198,1,0,200,201,2,0,206,
        206,208,208,2,0,65,65,244,244,1,0,210,211,1,0,214,215,8,0,19,19,
        23,23,85,87,89,89,96,96,256,256,274,274,278,278,2,0,218,218,276,
        276,1,0,226,227,2,0,229,229,247,247,2,0,230,230,277,277,1,0,235,
        236,1,0,242,243,1,0,248,249,2,0,68,68,144,144,2,0,168,169,224,225,
        2,0,49,49,131,131,3,0,11,11,206,206,244,244,1,0,258,259,2,0,260,
        260,263,263,4,0,23,23,261,261,268,268,280,280,2,0,264,264,280,280,
        2,0,65,65,228,228,1,0,265,266,2,0,69,69,199,199,1,0,238,240,1,0,
        285,286,16,0,1,17,19,24,26,51,53,54,56,60,62,76,78,87,89,185,187,
        219,221,222,224,236,241,244,246,258,260,262,264,280,282,282,891,
        0,74,1,0,0,0,2,79,1,0,0,0,4,89,1,0,0,0,6,445,1,0,0,0,8,447,1,0,0,
        0,10,454,1,0,0,0,12,461,1,0,0,0,14,468,1,0,0,0,16,498,1,0,0,0,18,
        506,1,0,0,0,20,508,1,0,0,0,22,527,1,0,0,0,24,538,1,0,0,0,26,552,
        1,0,0,0,28,556,1,0,0,0,30,589,1,0,0,0,32,600,1,0,0,0,34,615,1,0,
        0,0,36,621,1,0,0,0,38,623,1,0,0,0,40,627,1,0,0,0,42,631,1,0,0,0,
        44,636,1,0,0,0,46,644,1,0,0,0,48,652,1,0,0,0,50,663,1,0,0,0,52,669,
        1,0,0,0,54,671,1,0,0,0,56,673,1,0,0,0,58,675,1,0,0,0,60,73,3,2,1,
        0,61,73,3,14,7,0,62,73,3,8,4,0,63,73,3,10,5,0,64,73,3,12,6,0,65,
        73,3,26,13,0,66,73,3,22,11,0,67,73,3,38,19,0,68,73,3,40,20,0,69,
        73,3,42,21,0,70,73,3,50,25,0,71,73,5,289,0,0,72,60,1,0,0,0,72,61,
        1,0,0,0,72,62,1,0,0,0,72,63,1,0,0,0,72,64,1,0,0,0,72,65,1,0,0,0,
        72,66,1,0,0,0,72,67,1,0,0,0,72,68,1,0,0,0,72,69,1,0,0,0,72,70,1,
        0,0,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,
        77,1,0,0,0,76,74,1,0,0,0,77,78,5,0,0,1,78,1,1,0,0,0,79,85,7,0,0,
        0,80,82,5,282,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,1,0,0,0,83,86,
        3,6,3,0,84,86,3,4,2,0,85,81,1,0,0,0,85,84,1,0,0,0,86,87,1,0,0,0,
        87,85,1,0,0,0,87,88,1,0,0,0,88,3,1,0,0,0,89,90,5,262,0,0,90,91,5,
        88,0,0,91,98,3,6,3,0,92,94,5,282,0,0,93,92,1,0,0,0,93,94,1,0,0,0,
        94,95,1,0,0,0,95,97,3,6,3,0,96,93,1,0,0,0,97,100,1,0,0,0,98,96,1,
        0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,223,
        0,0,102,5,1,0,0,0,103,446,5,1,0,0,104,446,5,2,0,0,105,446,5,6,0,
        0,106,107,7,1,0,0,107,108,5,88,0,0,108,109,7,2,0,0,109,446,5,223,
        0,0,110,446,5,10,0,0,111,446,5,12,0,0,112,113,7,3,0,0,113,114,5,
        88,0,0,114,115,3,54,27,0,115,116,5,223,0,0,116,446,1,0,0,0,117,446,
        5,17,0,0,118,123,5,18,0,0,119,120,5,88,0,0,120,121,3,54,27,0,121,
        122,5,223,0,0,122,124,1,0,0,0,123,119,1,0,0,0,123,124,1,0,0,0,124,
        446,1,0,0,0,125,446,5,20,0,0,126,446,5,21,0,0,127,128,7,4,0,0,128,
        129,5,88,0,0,129,130,3,54,27,0,130,131,5,223,0,0,131,446,1,0,0,0,
        132,446,7,5,0,0,133,446,5,27,0,0,134,446,5,28,0,0,135,136,7,6,0,
        0,136,137,5,88,0,0,137,138,3,54,27,0,138,139,5,223,0,0,139,446,1,
        0,0,0,140,141,5,32,0,0,141,142,5,88,0,0,142,143,3,54,27,0,143,144,
        5,223,0,0,144,446,1,0,0,0,145,157,7,7,0,0,146,148,5,88,0,0,147,149,
        7,8,0,0,148,147,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,152,
        5,282,0,0,151,150,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,155,
        7,9,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,158,
        5,223,0,0,157,146,1,0,0,0,157,158,1,0,0,0,158,446,1,0,0,0,159,446,
        5,34,0,0,160,446,7,10,0,0,161,446,5,36,0,0,162,446,7,11,0,0,163,
        446,5,40,0,0,164,446,7,12,0,0,165,446,7,13,0,0,166,446,5,47,0,0,
        167,446,5,53,0,0,168,446,5,56,0,0,169,446,7,14,0,0,170,446,7,15,
        0,0,171,446,5,61,0,0,172,173,7,16,0,0,173,174,5,88,0,0,174,177,7,
        17,0,0,175,176,5,282,0,0,176,178,7,17,0,0,177,175,1,0,0,0,177,178,
        1,0,0,0,178,179,1,0,0,0,179,446,5,223,0,0,180,181,5,63,0,0,181,182,
        5,88,0,0,182,185,7,18,0,0,183,184,5,282,0,0,184,186,7,19,0,0,185,
        183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,446,5,223,0,0,188,
        446,5,66,0,0,189,446,5,67,0,0,190,191,5,70,0,0,191,192,5,88,0,0,
        192,193,7,20,0,0,193,446,5,223,0,0,194,195,7,21,0,0,195,196,5,88,
        0,0,196,197,7,22,0,0,197,446,5,223,0,0,198,446,5,77,0,0,199,446,
        5,78,0,0,200,446,5,79,0,0,201,446,5,81,0,0,202,203,7,23,0,0,203,
        204,5,88,0,0,204,205,3,54,27,0,205,206,5,223,0,0,206,446,1,0,0,0,
        207,446,5,83,0,0,208,446,5,84,0,0,209,446,5,90,0,0,210,211,5,91,
        0,0,211,212,5,88,0,0,212,213,3,54,27,0,213,214,5,282,0,0,214,217,
        3,54,27,0,215,216,5,282,0,0,216,218,3,54,27,0,217,215,1,0,0,0,217,
        218,1,0,0,0,218,219,1,0,0,0,219,220,5,223,0,0,220,446,1,0,0,0,221,
        225,7,24,0,0,222,223,5,88,0,0,223,224,7,25,0,0,224,226,5,223,0,0,
        225,222,1,0,0,0,225,226,1,0,0,0,226,446,1,0,0,0,227,231,5,97,0,0,
        228,229,5,88,0,0,229,230,7,26,0,0,230,232,5,223,0,0,231,228,1,0,
        0,0,231,232,1,0,0,0,232,446,1,0,0,0,233,234,5,100,0,0,234,235,5,
        88,0,0,235,236,7,27,0,0,236,446,5,223,0,0,237,446,5,103,0,0,238,
        446,5,104,0,0,239,446,5,106,0,0,240,446,5,107,0,0,241,446,5,109,
        0,0,242,446,5,110,0,0,243,446,5,111,0,0,244,248,7,28,0,0,245,246,
        5,88,0,0,246,247,7,29,0,0,247,249,5,223,0,0,248,245,1,0,0,0,248,
        249,1,0,0,0,249,446,1,0,0,0,250,446,5,113,0,0,251,446,7,30,0,0,252,
        446,7,31,0,0,253,446,5,118,0,0,254,446,5,120,0,0,255,446,7,32,0,
        0,256,446,5,123,0,0,257,446,5,119,0,0,258,446,7,33,0,0,259,446,7,
        34,0,0,260,446,7,35,0,0,261,446,5,130,0,0,262,446,5,132,0,0,263,
        446,5,133,0,0,264,446,7,36,0,0,265,446,7,37,0,0,266,446,5,138,0,
        0,267,446,7,38,0,0,268,446,5,140,0,0,269,446,5,141,0,0,270,446,5,
        143,0,0,271,446,5,145,0,0,272,446,5,146,0,0,273,446,5,147,0,0,274,
        446,5,148,0,0,275,446,5,149,0,0,276,446,7,39,0,0,277,446,5,152,0,
        0,278,446,7,40,0,0,279,446,7,41,0,0,280,446,7,42,0,0,281,446,5,159,
        0,0,282,446,7,43,0,0,283,446,5,162,0,0,284,446,5,163,0,0,285,446,
        5,165,0,0,286,446,5,166,0,0,287,446,7,44,0,0,288,446,7,45,0,0,289,
        446,5,172,0,0,290,446,5,173,0,0,291,446,7,46,0,0,292,446,7,47,0,
        0,293,446,5,178,0,0,294,446,7,48,0,0,295,446,5,182,0,0,296,446,5,
        183,0,0,297,446,5,185,0,0,298,446,7,49,0,0,299,446,5,192,0,0,300,
        301,7,50,0,0,301,302,5,88,0,0,302,303,7,51,0,0,303,446,5,223,0,0,
        304,446,5,185,0,0,305,446,7,52,0,0,306,446,5,190,0,0,307,446,7,53,
        0,0,308,309,5,196,0,0,309,310,5,88,0,0,310,311,7,54,0,0,311,446,
        5,223,0,0,312,446,7,55,0,0,313,446,7,56,0,0,314,315,5,204,0,0,315,
        316,5,88,0,0,316,317,3,54,27,0,317,318,5,282,0,0,318,321,3,54,27,
        0,319,320,5,282,0,0,320,322,3,54,27,0,321,319,1,0,0,0,321,322,1,
        0,0,0,322,323,1,0,0,0,323,324,5,223,0,0,324,446,1,0,0,0,325,326,
        5,205,0,0,326,327,5,88,0,0,327,328,3,54,27,0,328,329,5,282,0,0,329,
        330,3,54,27,0,330,331,5,223,0,0,331,446,1,0,0,0,332,336,7,57,0,0,
        333,334,5,88,0,0,334,335,7,58,0,0,335,337,5,223,0,0,336,333,1,0,
        0,0,336,337,1,0,0,0,337,446,1,0,0,0,338,446,5,207,0,0,339,446,5,
        209,0,0,340,446,5,203,0,0,341,342,7,59,0,0,342,343,5,88,0,0,343,
        344,3,52,26,0,344,345,5,223,0,0,345,446,1,0,0,0,346,347,7,60,0,0,
        347,348,5,88,0,0,348,349,7,61,0,0,349,446,5,223,0,0,350,446,5,217,
        0,0,351,446,7,62,0,0,352,446,5,219,0,0,353,354,5,222,0,0,354,358,
        5,88,0,0,355,359,5,5,0,0,356,359,5,9,0,0,357,359,3,54,27,0,358,355,
        1,0,0,0,358,356,1,0,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,446,
        5,223,0,0,361,368,7,63,0,0,362,363,5,88,0,0,363,364,3,54,27,0,364,
        365,5,282,0,0,365,366,3,54,27,0,366,367,5,223,0,0,367,369,1,0,0,
        0,368,362,1,0,0,0,368,369,1,0,0,0,369,446,1,0,0,0,370,371,7,64,0,
        0,371,374,5,88,0,0,372,375,5,92,0,0,373,375,3,54,27,0,374,372,1,
        0,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,446,5,223,0,0,377,446,
        7,65,0,0,378,446,5,231,0,0,379,380,5,232,0,0,380,381,5,88,0,0,381,
        382,3,54,27,0,382,383,5,223,0,0,383,446,1,0,0,0,384,446,5,233,0,
        0,385,390,5,234,0,0,386,387,5,88,0,0,387,388,3,54,27,0,388,389,5,
        223,0,0,389,391,1,0,0,0,390,386,1,0,0,0,390,391,1,0,0,0,391,446,
        1,0,0,0,392,446,7,66,0,0,393,446,7,67,0,0,394,446,5,246,0,0,395,
        446,7,68,0,0,396,414,5,250,0,0,397,399,5,88,0,0,398,400,7,69,0,0,
        399,398,1,0,0,0,399,400,1,0,0,0,400,402,1,0,0,0,401,403,5,282,0,
        0,402,401,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,406,7,70,0,
        0,405,404,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,5,282,
        0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,412,7,71,
        0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,415,5,223,
        0,0,414,397,1,0,0,0,414,415,1,0,0,0,415,446,1,0,0,0,416,446,5,251,
        0,0,417,418,5,254,0,0,418,419,5,88,0,0,419,420,7,72,0,0,420,446,
        5,223,0,0,421,446,5,257,0,0,422,423,7,73,0,0,423,424,5,88,0,0,424,
        425,3,52,26,0,425,426,5,223,0,0,426,446,1,0,0,0,427,428,7,74,0,0,
        428,429,5,88,0,0,429,430,7,75,0,0,430,446,5,223,0,0,431,437,7,76,
        0,0,432,434,5,88,0,0,433,435,7,77,0,0,434,433,1,0,0,0,434,435,1,
        0,0,0,435,436,1,0,0,0,436,438,5,223,0,0,437,432,1,0,0,0,437,438,
        1,0,0,0,438,446,1,0,0,0,439,440,7,78,0,0,440,441,5,88,0,0,441,442,
        3,54,27,0,442,443,5,223,0,0,443,446,1,0,0,0,444,446,5,267,0,0,445,
        103,1,0,0,0,445,104,1,0,0,0,445,105,1,0,0,0,445,106,1,0,0,0,445,
        110,1,0,0,0,445,111,1,0,0,0,445,112,1,0,0,0,445,117,1,0,0,0,445,
        118,1,0,0,0,445,125,1,0,0,0,445,126,1,0,0,0,445,127,1,0,0,0,445,
        132,1,0,0,0,445,133,1,0,0,0,445,134,1,0,0,0,445,135,1,0,0,0,445,
        140,1,0,0,0,445,145,1,0,0,0,445,159,1,0,0,0,445,160,1,0,0,0,445,
        161,1,0,0,0,445,162,1,0,0,0,445,163,1,0,0,0,445,164,1,0,0,0,445,
        165,1,0,0,0,445,166,1,0,0,0,445,167,1,0,0,0,445,168,1,0,0,0,445,
        169,1,0,0,0,445,170,1,0,0,0,445,171,1,0,0,0,445,172,1,0,0,0,445,
        180,1,0,0,0,445,188,1,0,0,0,445,189,1,0,0,0,445,190,1,0,0,0,445,
        194,1,0,0,0,445,198,1,0,0,0,445,199,1,0,0,0,445,200,1,0,0,0,445,
        201,1,0,0,0,445,202,1,0,0,0,445,207,1,0,0,0,445,208,1,0,0,0,445,
        209,1,0,0,0,445,210,1,0,0,0,445,221,1,0,0,0,445,227,1,0,0,0,445,
        233,1,0,0,0,445,237,1,0,0,0,445,238,1,0,0,0,445,239,1,0,0,0,445,
        240,1,0,0,0,445,241,1,0,0,0,445,242,1,0,0,0,445,243,1,0,0,0,445,
        244,1,0,0,0,445,250,1,0,0,0,445,251,1,0,0,0,445,252,1,0,0,0,445,
        253,1,0,0,0,445,254,1,0,0,0,445,255,1,0,0,0,445,256,1,0,0,0,445,
        257,1,0,0,0,445,258,1,0,0,0,445,259,1,0,0,0,445,260,1,0,0,0,445,
        261,1,0,0,0,445,262,1,0,0,0,445,263,1,0,0,0,445,264,1,0,0,0,445,
        265,1,0,0,0,445,266,1,0,0,0,445,267,1,0,0,0,445,268,1,0,0,0,445,
        269,1,0,0,0,445,270,1,0,0,0,445,271,1,0,0,0,445,272,1,0,0,0,445,
        273,1,0,0,0,445,274,1,0,0,0,445,275,1,0,0,0,445,276,1,0,0,0,445,
        277,1,0,0,0,445,278,1,0,0,0,445,279,1,0,0,0,445,280,1,0,0,0,445,
        281,1,0,0,0,445,282,1,0,0,0,445,283,1,0,0,0,445,284,1,0,0,0,445,
        285,1,0,0,0,445,286,1,0,0,0,445,287,1,0,0,0,445,288,1,0,0,0,445,
        289,1,0,0,0,445,290,1,0,0,0,445,291,1,0,0,0,445,292,1,0,0,0,445,
        293,1,0,0,0,445,294,1,0,0,0,445,295,1,0,0,0,445,296,1,0,0,0,445,
        297,1,0,0,0,445,298,1,0,0,0,445,299,1,0,0,0,445,300,1,0,0,0,445,
        304,1,0,0,0,445,305,1,0,0,0,445,306,1,0,0,0,445,307,1,0,0,0,445,
        308,1,0,0,0,445,312,1,0,0,0,445,313,1,0,0,0,445,314,1,0,0,0,445,
        325,1,0,0,0,445,332,1,0,0,0,445,338,1,0,0,0,445,339,1,0,0,0,445,
        340,1,0,0,0,445,341,1,0,0,0,445,346,1,0,0,0,445,350,1,0,0,0,445,
        351,1,0,0,0,445,352,1,0,0,0,445,353,1,0,0,0,445,361,1,0,0,0,445,
        370,1,0,0,0,445,377,1,0,0,0,445,378,1,0,0,0,445,379,1,0,0,0,445,
        384,1,0,0,0,445,385,1,0,0,0,445,392,1,0,0,0,445,393,1,0,0,0,445,
        394,1,0,0,0,445,395,1,0,0,0,445,396,1,0,0,0,445,416,1,0,0,0,445,
        417,1,0,0,0,445,421,1,0,0,0,445,422,1,0,0,0,445,427,1,0,0,0,445,
        431,1,0,0,0,445,439,1,0,0,0,445,444,1,0,0,0,446,7,1,0,0,0,447,448,
        5,55,0,0,448,449,5,18,0,0,449,450,3,46,23,0,450,452,5,52,0,0,451,
        453,5,283,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,9,1,0,0,0,454,
        455,5,55,0,0,455,456,5,234,0,0,456,457,3,48,24,0,457,459,5,52,0,
        0,458,460,5,283,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,11,1,0,0,
        0,461,462,5,55,0,0,462,463,5,237,0,0,463,464,3,46,23,0,464,466,5,
        52,0,0,465,467,5,283,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,13,
        1,0,0,0,468,469,5,25,0,0,469,484,3,16,8,0,470,472,5,289,0,0,471,
        470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,
        480,1,0,0,0,475,473,1,0,0,0,476,481,3,30,15,0,477,481,3,32,16,0,
        478,481,3,20,10,0,479,481,5,245,0,0,480,476,1,0,0,0,480,477,1,0,
        0,0,480,478,1,0,0,0,480,479,1,0,0,0,481,483,1,0,0,0,482,473,1,0,
        0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,490,1,0,
        0,0,486,484,1,0,0,0,487,489,5,289,0,0,488,487,1,0,0,0,489,492,1,
        0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,490,1,
        0,0,0,493,494,5,283,0,0,494,15,1,0,0,0,495,499,3,54,27,0,496,499,
        3,52,26,0,497,499,3,56,28,0,498,495,1,0,0,0,498,496,1,0,0,0,498,
        497,1,0,0,0,499,502,1,0,0,0,500,501,7,79,0,0,501,503,3,18,9,0,502,
        500,1,0,0,0,502,503,1,0,0,0,503,17,1,0,0,0,504,507,3,54,27,0,505,
        507,3,52,26,0,506,504,1,0,0,0,506,505,1,0,0,0,507,19,1,0,0,0,508,
        512,5,221,0,0,509,511,5,289,0,0,510,509,1,0,0,0,511,514,1,0,0,0,
        512,510,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,
        515,524,3,28,14,0,516,518,5,289,0,0,517,516,1,0,0,0,518,519,1,0,
        0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,523,3,28,
        14,0,522,517,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,525,1,0,
        0,0,525,21,1,0,0,0,526,524,1,0,0,0,527,532,3,24,12,0,528,531,3,14,
        7,0,529,531,3,46,23,0,530,528,1,0,0,0,530,529,1,0,0,0,531,534,1,
        0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,536,1,0,0,0,534,532,1,
        0,0,0,535,537,3,26,13,0,536,535,1,0,0,0,536,537,1,0,0,0,537,23,1,
        0,0,0,538,546,5,220,0,0,539,541,5,289,0,0,540,539,1,0,0,0,541,544,
        1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,544,542,
        1,0,0,0,545,547,3,28,14,0,546,542,1,0,0,0,547,548,1,0,0,0,548,546,
        1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,5,283,0,0,551,25,
        1,0,0,0,552,553,5,220,0,0,553,554,5,200,0,0,554,555,5,283,0,0,555,
        27,1,0,0,0,556,560,3,34,17,0,557,559,5,289,0,0,558,557,1,0,0,0,559,
        562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,
        560,1,0,0,0,563,567,5,15,0,0,564,566,5,289,0,0,565,564,1,0,0,0,566,
        569,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,
        567,1,0,0,0,570,578,3,36,18,0,571,573,5,289,0,0,572,571,1,0,0,0,
        573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,
        576,574,1,0,0,0,577,579,3,30,15,0,578,574,1,0,0,0,578,579,1,0,0,
        0,579,587,1,0,0,0,580,582,5,289,0,0,581,580,1,0,0,0,582,585,1,0,
        0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,583,1,0,
        0,0,586,588,3,32,16,0,587,583,1,0,0,0,587,588,1,0,0,0,588,29,1,0,
        0,0,589,593,7,79,0,0,590,592,5,289,0,0,591,590,1,0,0,0,592,595,1,
        0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,598,1,0,0,0,595,593,1,
        0,0,0,596,599,3,54,27,0,597,599,3,52,26,0,598,596,1,0,0,0,598,597,
        1,0,0,0,599,31,1,0,0,0,600,604,5,202,0,0,601,603,5,289,0,0,602,601,
        1,0,0,0,603,606,1,0,0,0,604,602,1,0,0,0,604,605,1,0,0,0,605,609,
        1,0,0,0,606,604,1,0,0,0,607,610,3,54,27,0,608,610,3,52,26,0,609,
        607,1,0,0,0,609,608,1,0,0,0,610,33,1,0,0,0,611,616,3,54,27,0,612,
        616,3,52,26,0,613,616,3,44,22,0,614,616,3,50,25,0,615,611,1,0,0,
        0,615,612,1,0,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,35,1,0,0,0,
        617,622,3,54,27,0,618,622,3,52,26,0,619,622,3,44,22,0,620,622,3,
        50,25,0,621,617,1,0,0,0,621,618,1,0,0,0,621,619,1,0,0,0,621,620,
        1,0,0,0,622,37,1,0,0,0,623,625,5,48,0,0,624,626,5,283,0,0,625,624,
        1,0,0,0,625,626,1,0,0,0,626,39,1,0,0,0,627,629,7,80,0,0,628,630,
        5,283,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,41,1,0,0,0,631,632,
        5,252,0,0,632,634,3,54,27,0,633,635,5,283,0,0,634,633,1,0,0,0,634,
        635,1,0,0,0,635,43,1,0,0,0,636,638,5,284,0,0,637,639,3,46,23,0,638,
        637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,641,5,284,0,0,641,
        45,1,0,0,0,642,645,3,50,25,0,643,645,5,289,0,0,644,642,1,0,0,0,644,
        643,1,0,0,0,645,646,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,
        47,1,0,0,0,648,653,3,50,25,0,649,653,5,25,0,0,650,653,5,220,0,0,
        651,653,5,289,0,0,652,648,1,0,0,0,652,649,1,0,0,0,652,650,1,0,0,
        0,652,651,1,0,0,0,653,654,1,0,0,0,654,652,1,0,0,0,654,655,1,0,0,
        0,655,49,1,0,0,0,656,664,3,52,26,0,657,664,3,54,27,0,658,664,3,56,
        28,0,659,664,5,292,0,0,660,664,5,283,0,0,661,664,5,88,0,0,662,664,
        5,223,0,0,663,656,1,0,0,0,663,657,1,0,0,0,663,658,1,0,0,0,663,659,
        1,0,0,0,663,660,1,0,0,0,663,661,1,0,0,0,663,662,1,0,0,0,664,665,
        1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,51,1,0,0,0,667,670,5,
        287,0,0,668,670,3,58,29,0,669,667,1,0,0,0,669,668,1,0,0,0,670,53,
        1,0,0,0,671,672,7,81,0,0,672,55,1,0,0,0,673,674,5,288,0,0,674,57,
        1,0,0,0,675,676,7,82,0,0,676,59,1,0,0,0,74,72,74,81,85,87,93,98,
        123,148,151,154,157,177,185,217,225,231,248,321,336,358,368,374,
        390,399,402,405,408,411,414,434,437,445,452,459,466,473,480,484,
        490,498,502,506,512,519,524,530,532,536,542,548,560,567,574,578,
        583,587,593,598,604,609,615,621,625,629,634,638,644,646,652,654,
        663,665,669
    ]

class Cobol85PreprocessorParser ( Parser ):

    grammarFileName = "Cobol85Preprocessor.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'('", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "')'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'*>'", "','", 
                     "'.'", "'=='" ]

    symbolicNames = [ "<INVALID>", "ADATA", "ADV", "ALIAS", "ANSI", "ANY", 
                      "APOST", "AR", "ARITH", "AUTO", "AWO", "BIN", "BLOCK0", 
                      "BUF", "BUFSIZE", "BY", "CBL", "CBLCARD", "CICS", 
                      "CO", "COBOL2", "COBOL3", "CODEPAGE", "COMPAT", "COMPILE", 
                      "COPY", "CP", "CPP", "CPSM", "CS", "CURR", "CURRENCY", 
                      "DATA", "DATEPROC", "DBCS", "DD", "DEBUG", "DECK", 
                      "DIAGTRUNC", "DLI", "DLL", "DP", "DTR", "DU", "DUMP", 
                      "DYN", "DYNAM", "EDF", "EJECT", "EJPD", "EN", "ENGLISH", 
                      "END_EXEC", "EPILOG", "EXCI", "EXEC", "EXIT", "EXP", 
                      "EXPORTALL", "EXTEND", "FASTSRT", "FEPI", "FLAG", 
                      "FLAGSTD", "FSRT", "FULL", "GDS", "GRAPHIC", "HOOK", 
                      "IN", "INTDATE", "JA", "JP", "KA", "LANG", "LANGUAGE", 
                      "LC", "LEASM", "LENGTH", "LIB", "LILIAN", "LIN", "LINECOUNT", 
                      "LINKAGE", "LIST", "LM", "LONGMIXED", "LONGUPPER", 
                      "LPARENCHAR", "LU", "MAP", "MARGINS", "MAX", "MD", 
                      "MDECK", "MIG", "MIXED", "NAME", "NAT", "NATIONAL", 
                      "NATLANG", "NN", "NO", "NOADATA", "NOADV", "NOALIAS", 
                      "NOAWO", "NOBLOCK0", "NOC", "NOCBLCARD", "NOCICS", 
                      "NOCMPR2", "NOCOMPILE", "NOCPSM", "NOCURR", "NOCURRENCY", 
                      "NOD", "NODATEPROC", "NODBCS", "NODE", "NODEBUG", 
                      "NODECK", "NODIAGTRUNC", "NODLL", "NODU", "NODUMP", 
                      "NODP", "NODTR", "NODYN", "NODYNAM", "NOEDF", "NOEJPD", 
                      "NOEPILOG", "NOEXIT", "NOEXP", "NOEXPORTALL", "NOF", 
                      "NOFASTSRT", "NOFEPI", "NOFLAG", "NOFLAGMIG", "NOFLAGSTD", 
                      "NOFSRT", "NOGRAPHIC", "NOHOOK", "NOLENGTH", "NOLIB", 
                      "NOLINKAGE", "NOLIST", "NOMAP", "NOMD", "NOMDECK", 
                      "NONAME", "NONUM", "NONUMBER", "NOOBJ", "NOOBJECT", 
                      "NOOFF", "NOOFFSET", "NOOPSEQUENCE", "NOOPT", "NOOPTIMIZE", 
                      "NOOPTIONS", "NOP", "NOPFD", "NOPROLOG", "NORENT", 
                      "NOS", "NOSEP", "NOSEPARATE", "NOSEQ", "NOSOURCE", 
                      "NOSPIE", "NOSQL", "NOSQLC", "NOSQLCCSID", "NOSSR", 
                      "NOSSRANGE", "NOSTDTRUNC", "NOSEQUENCE", "NOTERM", 
                      "NOTERMINAL", "NOTEST", "NOTHREAD", "NOTRIG", "NOVBREF", 
                      "NOWD", "NOWORD", "NOX", "NOXREF", "NOZWB", "NS", 
                      "NSEQ", "NSYMBOL", "NUM", "NUMBER", "NUMPROC", "OBJ", 
                      "OBJECT", "OF", "OFF", "OFFSET", "ON", "OP", "OPMARGINS", 
                      "OPSEQUENCE", "OPT", "OPTFILE", "OPTIMIZE", "OPTIONS", 
                      "OUT", "OUTDD", "PFD", "PPTDBG", "PGMN", "PGMNAME", 
                      "PROCESS", "PROLOG", "QUOTE", "RENT", "REPLACE", "REPLACING", 
                      "RMODE", "RPARENCHAR", "SEP", "SEPARATE", "SEQ", "SEQUENCE", 
                      "SHORT", "SIZE", "SOURCE", "SP", "SPACE", "SPIE", 
                      "SQL", "SQLC", "SQLCCSID", "SQLIMS", "SKIP1", "SKIP2", 
                      "SKIP3", "SS", "SSR", "SSRANGE", "STD", "SUPPRESS", 
                      "SYSEIB", "SZ", "TERM", "TERMINAL", "TEST", "THREAD", 
                      "TITLE", "TRIG", "TRUNC", "UE", "UPPER", "VBREF", 
                      "WD", "WORD", "XMLPARSE", "XMLSS", "XOPTS", "XP", 
                      "XREF", "YEARWINDOW", "YW", "ZWB", "C_CHAR", "D_CHAR", 
                      "E_CHAR", "F_CHAR", "H_CHAR", "I_CHAR", "M_CHAR", 
                      "N_CHAR", "Q_CHAR", "S_CHAR", "U_CHAR", "W_CHAR", 
                      "X_CHAR", "COMMENTTAG", "COMMACHAR", "DOT", "DOUBLEEQUALCHAR", 
                      "NONNUMERICLITERAL", "NUMERICLITERAL", "IDENTIFIER", 
                      "FILENAME", "NEWLINE", "COMMENTLINE", "WS", "TEXT" ]

    RULE_startRule = 0
    RULE_compilerOptions = 1
    RULE_compilerXOpts = 2
    RULE_compilerOption = 3
    RULE_execCicsStatement = 4
    RULE_execSqlStatement = 5
    RULE_execSqlImsStatement = 6
    RULE_copyStatement = 7
    RULE_copySource = 8
    RULE_copyLibrary = 9
    RULE_replacingPhrase = 10
    RULE_replaceArea = 11
    RULE_replaceByStatement = 12
    RULE_replaceOffStatement = 13
    RULE_replaceClause = 14
    RULE_directoryPhrase = 15
    RULE_familyPhrase = 16
    RULE_replaceable = 17
    RULE_replacement = 18
    RULE_ejectStatement = 19
    RULE_skipStatement = 20
    RULE_titleStatement = 21
    RULE_pseudoText = 22
    RULE_charData = 23
    RULE_charDataSql = 24
    RULE_charDataLine = 25
    RULE_cobolWord = 26
    RULE_literal = 27
    RULE_filename = 28
    RULE_charDataKeyword = 29

    ruleNames =  [ "startRule", "compilerOptions", "compilerXOpts", "compilerOption", 
                   "execCicsStatement", "execSqlStatement", "execSqlImsStatement", 
                   "copyStatement", "copySource", "copyLibrary", "replacingPhrase", 
                   "replaceArea", "replaceByStatement", "replaceOffStatement", 
                   "replaceClause", "directoryPhrase", "familyPhrase", "replaceable", 
                   "replacement", "ejectStatement", "skipStatement", "titleStatement", 
                   "pseudoText", "charData", "charDataSql", "charDataLine", 
                   "cobolWord", "literal", "filename", "charDataKeyword" ]

    EOF = Token.EOF
    ADATA=1
    ADV=2
    ALIAS=3
    ANSI=4
    ANY=5
    APOST=6
    AR=7
    ARITH=8
    AUTO=9
    AWO=10
    BIN=11
    BLOCK0=12
    BUF=13
    BUFSIZE=14
    BY=15
    CBL=16
    CBLCARD=17
    CICS=18
    CO=19
    COBOL2=20
    COBOL3=21
    CODEPAGE=22
    COMPAT=23
    COMPILE=24
    COPY=25
    CP=26
    CPP=27
    CPSM=28
    CS=29
    CURR=30
    CURRENCY=31
    DATA=32
    DATEPROC=33
    DBCS=34
    DD=35
    DEBUG=36
    DECK=37
    DIAGTRUNC=38
    DLI=39
    DLL=40
    DP=41
    DTR=42
    DU=43
    DUMP=44
    DYN=45
    DYNAM=46
    EDF=47
    EJECT=48
    EJPD=49
    EN=50
    ENGLISH=51
    END_EXEC=52
    EPILOG=53
    EXCI=54
    EXEC=55
    EXIT=56
    EXP=57
    EXPORTALL=58
    EXTEND=59
    FASTSRT=60
    FEPI=61
    FLAG=62
    FLAGSTD=63
    FSRT=64
    FULL=65
    GDS=66
    GRAPHIC=67
    HOOK=68
    IN=69
    INTDATE=70
    JA=71
    JP=72
    KA=73
    LANG=74
    LANGUAGE=75
    LC=76
    LEASM=77
    LENGTH=78
    LIB=79
    LILIAN=80
    LIN=81
    LINECOUNT=82
    LINKAGE=83
    LIST=84
    LM=85
    LONGMIXED=86
    LONGUPPER=87
    LPARENCHAR=88
    LU=89
    MAP=90
    MARGINS=91
    MAX=92
    MD=93
    MDECK=94
    MIG=95
    MIXED=96
    NAME=97
    NAT=98
    NATIONAL=99
    NATLANG=100
    NN=101
    NO=102
    NOADATA=103
    NOADV=104
    NOALIAS=105
    NOAWO=106
    NOBLOCK0=107
    NOC=108
    NOCBLCARD=109
    NOCICS=110
    NOCMPR2=111
    NOCOMPILE=112
    NOCPSM=113
    NOCURR=114
    NOCURRENCY=115
    NOD=116
    NODATEPROC=117
    NODBCS=118
    NODE=119
    NODEBUG=120
    NODECK=121
    NODIAGTRUNC=122
    NODLL=123
    NODU=124
    NODUMP=125
    NODP=126
    NODTR=127
    NODYN=128
    NODYNAM=129
    NOEDF=130
    NOEJPD=131
    NOEPILOG=132
    NOEXIT=133
    NOEXP=134
    NOEXPORTALL=135
    NOF=136
    NOFASTSRT=137
    NOFEPI=138
    NOFLAG=139
    NOFLAGMIG=140
    NOFLAGSTD=141
    NOFSRT=142
    NOGRAPHIC=143
    NOHOOK=144
    NOLENGTH=145
    NOLIB=146
    NOLINKAGE=147
    NOLIST=148
    NOMAP=149
    NOMD=150
    NOMDECK=151
    NONAME=152
    NONUM=153
    NONUMBER=154
    NOOBJ=155
    NOOBJECT=156
    NOOFF=157
    NOOFFSET=158
    NOOPSEQUENCE=159
    NOOPT=160
    NOOPTIMIZE=161
    NOOPTIONS=162
    NOP=163
    NOPFD=164
    NOPROLOG=165
    NORENT=166
    NOS=167
    NOSEP=168
    NOSEPARATE=169
    NOSEQ=170
    NOSOURCE=171
    NOSPIE=172
    NOSQL=173
    NOSQLC=174
    NOSQLCCSID=175
    NOSSR=176
    NOSSRANGE=177
    NOSTDTRUNC=178
    NOSEQUENCE=179
    NOTERM=180
    NOTERMINAL=181
    NOTEST=182
    NOTHREAD=183
    NOTRIG=184
    NOVBREF=185
    NOWD=186
    NOWORD=187
    NOX=188
    NOXREF=189
    NOZWB=190
    NS=191
    NSEQ=192
    NSYMBOL=193
    NUM=194
    NUMBER=195
    NUMPROC=196
    OBJ=197
    OBJECT=198
    OF=199
    OFF=200
    OFFSET=201
    ON=202
    OP=203
    OPMARGINS=204
    OPSEQUENCE=205
    OPT=206
    OPTFILE=207
    OPTIMIZE=208
    OPTIONS=209
    OUT=210
    OUTDD=211
    PFD=212
    PPTDBG=213
    PGMN=214
    PGMNAME=215
    PROCESS=216
    PROLOG=217
    QUOTE=218
    RENT=219
    REPLACE=220
    REPLACING=221
    RMODE=222
    RPARENCHAR=223
    SEP=224
    SEPARATE=225
    SEQ=226
    SEQUENCE=227
    SHORT=228
    SIZE=229
    SOURCE=230
    SP=231
    SPACE=232
    SPIE=233
    SQL=234
    SQLC=235
    SQLCCSID=236
    SQLIMS=237
    SKIP1=238
    SKIP2=239
    SKIP3=240
    SS=241
    SSR=242
    SSRANGE=243
    STD=244
    SUPPRESS=245
    SYSEIB=246
    SZ=247
    TERM=248
    TERMINAL=249
    TEST=250
    THREAD=251
    TITLE=252
    TRIG=253
    TRUNC=254
    UE=255
    UPPER=256
    VBREF=257
    WD=258
    WORD=259
    XMLPARSE=260
    XMLSS=261
    XOPTS=262
    XP=263
    XREF=264
    YEARWINDOW=265
    YW=266
    ZWB=267
    C_CHAR=268
    D_CHAR=269
    E_CHAR=270
    F_CHAR=271
    H_CHAR=272
    I_CHAR=273
    M_CHAR=274
    N_CHAR=275
    Q_CHAR=276
    S_CHAR=277
    U_CHAR=278
    W_CHAR=279
    X_CHAR=280
    COMMENTTAG=281
    COMMACHAR=282
    DOT=283
    DOUBLEEQUALCHAR=284
    NONNUMERICLITERAL=285
    NUMERICLITERAL=286
    IDENTIFIER=287
    FILENAME=288
    NEWLINE=289
    COMMENTLINE=290
    WS=291
    TEXT=292

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Cobol85PreprocessorParser.EOF, 0)

        def compilerOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CompilerOptionsContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CompilerOptionsContext,i)


        def copyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CopyStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CopyStatementContext,i)


        def execCicsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ExecCicsStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ExecCicsStatementContext,i)


        def execSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ExecSqlStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ExecSqlStatementContext,i)


        def execSqlImsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ExecSqlImsStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ExecSqlImsStatementContext,i)


        def replaceOffStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ReplaceOffStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceOffStatementContext,i)


        def replaceArea(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ReplaceAreaContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceAreaContext,i)


        def ejectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.EjectStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.EjectStatementContext,i)


        def skipStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.SkipStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.SkipStatementContext,i)


        def titleStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.TitleStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.TitleStatementContext,i)


        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataLineContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_startRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartRule" ):
                listener.enterStartRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartRule" ):
                listener.exitStartRule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartRule" ):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = Cobol85PreprocessorParser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 74
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2310346608841326594) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8193) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -288230376151711745) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -9042383626829825) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 85597355895) != 0):
                self.state = 72
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 60
                    self.compilerOptions()
                    pass

                elif la_ == 2:
                    self.state = 61
                    self.copyStatement()
                    pass

                elif la_ == 3:
                    self.state = 62
                    self.execCicsStatement()
                    pass

                elif la_ == 4:
                    self.state = 63
                    self.execSqlStatement()
                    pass

                elif la_ == 5:
                    self.state = 64
                    self.execSqlImsStatement()
                    pass

                elif la_ == 6:
                    self.state = 65
                    self.replaceOffStatement()
                    pass

                elif la_ == 7:
                    self.state = 66
                    self.replaceArea()
                    pass

                elif la_ == 8:
                    self.state = 67
                    self.ejectStatement()
                    pass

                elif la_ == 9:
                    self.state = 68
                    self.skipStatement()
                    pass

                elif la_ == 10:
                    self.state = 69
                    self.titleStatement()
                    pass

                elif la_ == 11:
                    self.state = 70
                    self.charDataLine()
                    pass

                elif la_ == 12:
                    self.state = 71
                    self.match(Cobol85PreprocessorParser.NEWLINE)
                    pass


                self.state = 76
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 77
            self.match(Cobol85PreprocessorParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCESS(self):
            return self.getToken(Cobol85PreprocessorParser.PROCESS, 0)

        def CBL(self):
            return self.getToken(Cobol85PreprocessorParser.CBL, 0)

        def compilerOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CompilerOptionContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CompilerOptionContext,i)


        def compilerXOpts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CompilerXOptsContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CompilerXOptsContext,i)


        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.COMMACHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_compilerOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerOptions" ):
                listener.enterCompilerOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerOptions" ):
                listener.exitCompilerOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilerOptions" ):
                return visitor.visitCompilerOptions(self)
            else:
                return visitor.visitChildren(self)




    def compilerOptions(self):

        localctx = Cobol85PreprocessorParser.CompilerOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilerOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 79
            _la = self._input.LA(1)
            if not(_la==16 or _la==216):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 85 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 85
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 6, 7, 8, 10, 12, 13, 14, 17, 18, 20, 21, 22, 24, 26, 27, 28, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 53, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 70, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 90, 91, 93, 94, 97, 100, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 218, 219, 222, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 242, 243, 246, 247, 248, 249, 250, 251, 254, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 271, 276, 277, 280, 282]:
                        self.state = 81
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==282:
                            self.state = 80
                            self.match(Cobol85PreprocessorParser.COMMACHAR)


                        self.state = 83
                        self.compilerOption()
                        pass
                    elif token in [262]:
                        self.state = 84
                        self.compilerXOpts()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 87 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerXOptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XOPTS(self):
            return self.getToken(Cobol85PreprocessorParser.XOPTS, 0)

        def LPARENCHAR(self):
            return self.getToken(Cobol85PreprocessorParser.LPARENCHAR, 0)

        def compilerOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CompilerOptionContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CompilerOptionContext,i)


        def RPARENCHAR(self):
            return self.getToken(Cobol85PreprocessorParser.RPARENCHAR, 0)

        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.COMMACHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_compilerXOpts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerXOpts" ):
                listener.enterCompilerXOpts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerXOpts" ):
                listener.exitCompilerXOpts(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilerXOpts" ):
                return visitor.visitCompilerXOpts(self)
            else:
                return visitor.visitChildren(self)




    def compilerXOpts(self):

        localctx = Cobol85PreprocessorParser.CompilerXOptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_compilerXOpts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 89
            self.match(Cobol85PreprocessorParser.XOPTS)
            self.state = 90
            self.match(Cobol85PreprocessorParser.LPARENCHAR)
            self.state = 91
            self.compilerOption()
            self.state = 98
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -639230256804891194) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -2669655688115) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -72060961292353545) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & 5750005924040276863) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 43540431) != 0):
                self.state = 93
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 92
                    self.match(Cobol85PreprocessorParser.COMMACHAR)


                self.state = 95
                self.compilerOption()
                self.state = 100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 101
            self.match(Cobol85PreprocessorParser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADATA(self):
            return self.getToken(Cobol85PreprocessorParser.ADATA, 0)

        def ADV(self):
            return self.getToken(Cobol85PreprocessorParser.ADV, 0)

        def APOST(self):
            return self.getToken(Cobol85PreprocessorParser.APOST, 0)

        def LPARENCHAR(self):
            return self.getToken(Cobol85PreprocessorParser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(Cobol85PreprocessorParser.RPARENCHAR, 0)

        def ARITH(self):
            return self.getToken(Cobol85PreprocessorParser.ARITH, 0)

        def AR(self):
            return self.getToken(Cobol85PreprocessorParser.AR, 0)

        def EXTEND(self):
            return self.getToken(Cobol85PreprocessorParser.EXTEND, 0)

        def E_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.E_CHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.E_CHAR, i)

        def COMPAT(self):
            return self.getToken(Cobol85PreprocessorParser.COMPAT, 0)

        def C_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.C_CHAR, 0)

        def AWO(self):
            return self.getToken(Cobol85PreprocessorParser.AWO, 0)

        def BLOCK0(self):
            return self.getToken(Cobol85PreprocessorParser.BLOCK0, 0)

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.LiteralContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,i)


        def BUFSIZE(self):
            return self.getToken(Cobol85PreprocessorParser.BUFSIZE, 0)

        def BUF(self):
            return self.getToken(Cobol85PreprocessorParser.BUF, 0)

        def CBLCARD(self):
            return self.getToken(Cobol85PreprocessorParser.CBLCARD, 0)

        def CICS(self):
            return self.getToken(Cobol85PreprocessorParser.CICS, 0)

        def COBOL2(self):
            return self.getToken(Cobol85PreprocessorParser.COBOL2, 0)

        def COBOL3(self):
            return self.getToken(Cobol85PreprocessorParser.COBOL3, 0)

        def CODEPAGE(self):
            return self.getToken(Cobol85PreprocessorParser.CODEPAGE, 0)

        def CP(self):
            return self.getToken(Cobol85PreprocessorParser.CP, 0)

        def COMPILE(self):
            return self.getToken(Cobol85PreprocessorParser.COMPILE, 0)

        def CPP(self):
            return self.getToken(Cobol85PreprocessorParser.CPP, 0)

        def CPSM(self):
            return self.getToken(Cobol85PreprocessorParser.CPSM, 0)

        def CURRENCY(self):
            return self.getToken(Cobol85PreprocessorParser.CURRENCY, 0)

        def CURR(self):
            return self.getToken(Cobol85PreprocessorParser.CURR, 0)

        def DATA(self):
            return self.getToken(Cobol85PreprocessorParser.DATA, 0)

        def DATEPROC(self):
            return self.getToken(Cobol85PreprocessorParser.DATEPROC, 0)

        def DP(self):
            return self.getToken(Cobol85PreprocessorParser.DP, 0)

        def COMMACHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.COMMACHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.COMMACHAR, i)

        def FLAG(self):
            return self.getToken(Cobol85PreprocessorParser.FLAG, 0)

        def NOFLAG(self):
            return self.getToken(Cobol85PreprocessorParser.NOFLAG, 0)

        def TRIG(self):
            return self.getToken(Cobol85PreprocessorParser.TRIG, 0)

        def NOTRIG(self):
            return self.getToken(Cobol85PreprocessorParser.NOTRIG, 0)

        def DBCS(self):
            return self.getToken(Cobol85PreprocessorParser.DBCS, 0)

        def DECK(self):
            return self.getToken(Cobol85PreprocessorParser.DECK, 0)

        def D_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.D_CHAR, 0)

        def DEBUG(self):
            return self.getToken(Cobol85PreprocessorParser.DEBUG, 0)

        def DIAGTRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.DIAGTRUNC, 0)

        def DTR(self):
            return self.getToken(Cobol85PreprocessorParser.DTR, 0)

        def DLL(self):
            return self.getToken(Cobol85PreprocessorParser.DLL, 0)

        def DUMP(self):
            return self.getToken(Cobol85PreprocessorParser.DUMP, 0)

        def DU(self):
            return self.getToken(Cobol85PreprocessorParser.DU, 0)

        def DYNAM(self):
            return self.getToken(Cobol85PreprocessorParser.DYNAM, 0)

        def DYN(self):
            return self.getToken(Cobol85PreprocessorParser.DYN, 0)

        def EDF(self):
            return self.getToken(Cobol85PreprocessorParser.EDF, 0)

        def EPILOG(self):
            return self.getToken(Cobol85PreprocessorParser.EPILOG, 0)

        def EXIT(self):
            return self.getToken(Cobol85PreprocessorParser.EXIT, 0)

        def EXPORTALL(self):
            return self.getToken(Cobol85PreprocessorParser.EXPORTALL, 0)

        def EXP(self):
            return self.getToken(Cobol85PreprocessorParser.EXP, 0)

        def FASTSRT(self):
            return self.getToken(Cobol85PreprocessorParser.FASTSRT, 0)

        def FSRT(self):
            return self.getToken(Cobol85PreprocessorParser.FSRT, 0)

        def FEPI(self):
            return self.getToken(Cobol85PreprocessorParser.FEPI, 0)

        def F_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.F_CHAR, 0)

        def I_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.I_CHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.I_CHAR, i)

        def S_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.S_CHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.S_CHAR, i)

        def U_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.U_CHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.U_CHAR, i)

        def W_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.W_CHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.W_CHAR, i)

        def FLAGSTD(self):
            return self.getToken(Cobol85PreprocessorParser.FLAGSTD, 0)

        def M_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.M_CHAR, 0)

        def H_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.H_CHAR, 0)

        def DD(self):
            return self.getToken(Cobol85PreprocessorParser.DD, 0)

        def N_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.N_CHAR, 0)

        def NN(self):
            return self.getToken(Cobol85PreprocessorParser.NN, 0)

        def SS(self):
            return self.getToken(Cobol85PreprocessorParser.SS, 0)

        def GDS(self):
            return self.getToken(Cobol85PreprocessorParser.GDS, 0)

        def GRAPHIC(self):
            return self.getToken(Cobol85PreprocessorParser.GRAPHIC, 0)

        def INTDATE(self):
            return self.getToken(Cobol85PreprocessorParser.INTDATE, 0)

        def ANSI(self):
            return self.getToken(Cobol85PreprocessorParser.ANSI, 0)

        def LILIAN(self):
            return self.getToken(Cobol85PreprocessorParser.LILIAN, 0)

        def LANGUAGE(self):
            return self.getToken(Cobol85PreprocessorParser.LANGUAGE, 0)

        def LANG(self):
            return self.getToken(Cobol85PreprocessorParser.LANG, 0)

        def ENGLISH(self):
            return self.getToken(Cobol85PreprocessorParser.ENGLISH, 0)

        def CS(self):
            return self.getToken(Cobol85PreprocessorParser.CS, 0)

        def EN(self):
            return self.getToken(Cobol85PreprocessorParser.EN, 0)

        def JA(self):
            return self.getToken(Cobol85PreprocessorParser.JA, 0)

        def JP(self):
            return self.getToken(Cobol85PreprocessorParser.JP, 0)

        def KA(self):
            return self.getToken(Cobol85PreprocessorParser.KA, 0)

        def UE(self):
            return self.getToken(Cobol85PreprocessorParser.UE, 0)

        def LEASM(self):
            return self.getToken(Cobol85PreprocessorParser.LEASM, 0)

        def LENGTH(self):
            return self.getToken(Cobol85PreprocessorParser.LENGTH, 0)

        def LIB(self):
            return self.getToken(Cobol85PreprocessorParser.LIB, 0)

        def LIN(self):
            return self.getToken(Cobol85PreprocessorParser.LIN, 0)

        def LINECOUNT(self):
            return self.getToken(Cobol85PreprocessorParser.LINECOUNT, 0)

        def LC(self):
            return self.getToken(Cobol85PreprocessorParser.LC, 0)

        def LINKAGE(self):
            return self.getToken(Cobol85PreprocessorParser.LINKAGE, 0)

        def LIST(self):
            return self.getToken(Cobol85PreprocessorParser.LIST, 0)

        def MAP(self):
            return self.getToken(Cobol85PreprocessorParser.MAP, 0)

        def MARGINS(self):
            return self.getToken(Cobol85PreprocessorParser.MARGINS, 0)

        def MDECK(self):
            return self.getToken(Cobol85PreprocessorParser.MDECK, 0)

        def MD(self):
            return self.getToken(Cobol85PreprocessorParser.MD, 0)

        def NOC(self):
            return self.getToken(Cobol85PreprocessorParser.NOC, 0)

        def NOCOMPILE(self):
            return self.getToken(Cobol85PreprocessorParser.NOCOMPILE, 0)

        def NAME(self):
            return self.getToken(Cobol85PreprocessorParser.NAME, 0)

        def ALIAS(self):
            return self.getToken(Cobol85PreprocessorParser.ALIAS, 0)

        def NOALIAS(self):
            return self.getToken(Cobol85PreprocessorParser.NOALIAS, 0)

        def NATLANG(self):
            return self.getToken(Cobol85PreprocessorParser.NATLANG, 0)

        def NOADATA(self):
            return self.getToken(Cobol85PreprocessorParser.NOADATA, 0)

        def NOADV(self):
            return self.getToken(Cobol85PreprocessorParser.NOADV, 0)

        def NOAWO(self):
            return self.getToken(Cobol85PreprocessorParser.NOAWO, 0)

        def NOBLOCK0(self):
            return self.getToken(Cobol85PreprocessorParser.NOBLOCK0, 0)

        def NOCBLCARD(self):
            return self.getToken(Cobol85PreprocessorParser.NOCBLCARD, 0)

        def NOCICS(self):
            return self.getToken(Cobol85PreprocessorParser.NOCICS, 0)

        def NOCMPR2(self):
            return self.getToken(Cobol85PreprocessorParser.NOCMPR2, 0)

        def NOCPSM(self):
            return self.getToken(Cobol85PreprocessorParser.NOCPSM, 0)

        def NOCURRENCY(self):
            return self.getToken(Cobol85PreprocessorParser.NOCURRENCY, 0)

        def NOCURR(self):
            return self.getToken(Cobol85PreprocessorParser.NOCURR, 0)

        def NODATEPROC(self):
            return self.getToken(Cobol85PreprocessorParser.NODATEPROC, 0)

        def NODP(self):
            return self.getToken(Cobol85PreprocessorParser.NODP, 0)

        def NODBCS(self):
            return self.getToken(Cobol85PreprocessorParser.NODBCS, 0)

        def NODEBUG(self):
            return self.getToken(Cobol85PreprocessorParser.NODEBUG, 0)

        def NODECK(self):
            return self.getToken(Cobol85PreprocessorParser.NODECK, 0)

        def NOD(self):
            return self.getToken(Cobol85PreprocessorParser.NOD, 0)

        def NODLL(self):
            return self.getToken(Cobol85PreprocessorParser.NODLL, 0)

        def NODE(self):
            return self.getToken(Cobol85PreprocessorParser.NODE, 0)

        def NODUMP(self):
            return self.getToken(Cobol85PreprocessorParser.NODUMP, 0)

        def NODU(self):
            return self.getToken(Cobol85PreprocessorParser.NODU, 0)

        def NODIAGTRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.NODIAGTRUNC, 0)

        def NODTR(self):
            return self.getToken(Cobol85PreprocessorParser.NODTR, 0)

        def NODYNAM(self):
            return self.getToken(Cobol85PreprocessorParser.NODYNAM, 0)

        def NODYN(self):
            return self.getToken(Cobol85PreprocessorParser.NODYN, 0)

        def NOEDF(self):
            return self.getToken(Cobol85PreprocessorParser.NOEDF, 0)

        def NOEPILOG(self):
            return self.getToken(Cobol85PreprocessorParser.NOEPILOG, 0)

        def NOEXIT(self):
            return self.getToken(Cobol85PreprocessorParser.NOEXIT, 0)

        def NOEXPORTALL(self):
            return self.getToken(Cobol85PreprocessorParser.NOEXPORTALL, 0)

        def NOEXP(self):
            return self.getToken(Cobol85PreprocessorParser.NOEXP, 0)

        def NOFASTSRT(self):
            return self.getToken(Cobol85PreprocessorParser.NOFASTSRT, 0)

        def NOFSRT(self):
            return self.getToken(Cobol85PreprocessorParser.NOFSRT, 0)

        def NOFEPI(self):
            return self.getToken(Cobol85PreprocessorParser.NOFEPI, 0)

        def NOF(self):
            return self.getToken(Cobol85PreprocessorParser.NOF, 0)

        def NOFLAGMIG(self):
            return self.getToken(Cobol85PreprocessorParser.NOFLAGMIG, 0)

        def NOFLAGSTD(self):
            return self.getToken(Cobol85PreprocessorParser.NOFLAGSTD, 0)

        def NOGRAPHIC(self):
            return self.getToken(Cobol85PreprocessorParser.NOGRAPHIC, 0)

        def NOLENGTH(self):
            return self.getToken(Cobol85PreprocessorParser.NOLENGTH, 0)

        def NOLIB(self):
            return self.getToken(Cobol85PreprocessorParser.NOLIB, 0)

        def NOLINKAGE(self):
            return self.getToken(Cobol85PreprocessorParser.NOLINKAGE, 0)

        def NOLIST(self):
            return self.getToken(Cobol85PreprocessorParser.NOLIST, 0)

        def NOMAP(self):
            return self.getToken(Cobol85PreprocessorParser.NOMAP, 0)

        def NOMDECK(self):
            return self.getToken(Cobol85PreprocessorParser.NOMDECK, 0)

        def NOMD(self):
            return self.getToken(Cobol85PreprocessorParser.NOMD, 0)

        def NONAME(self):
            return self.getToken(Cobol85PreprocessorParser.NONAME, 0)

        def NONUMBER(self):
            return self.getToken(Cobol85PreprocessorParser.NONUMBER, 0)

        def NONUM(self):
            return self.getToken(Cobol85PreprocessorParser.NONUM, 0)

        def NOOBJECT(self):
            return self.getToken(Cobol85PreprocessorParser.NOOBJECT, 0)

        def NOOBJ(self):
            return self.getToken(Cobol85PreprocessorParser.NOOBJ, 0)

        def NOOFFSET(self):
            return self.getToken(Cobol85PreprocessorParser.NOOFFSET, 0)

        def NOOFF(self):
            return self.getToken(Cobol85PreprocessorParser.NOOFF, 0)

        def NOOPSEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPSEQUENCE, 0)

        def NOOPTIMIZE(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPTIMIZE, 0)

        def NOOPT(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPT, 0)

        def NOOPTIONS(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPTIONS, 0)

        def NOP(self):
            return self.getToken(Cobol85PreprocessorParser.NOP, 0)

        def NOPROLOG(self):
            return self.getToken(Cobol85PreprocessorParser.NOPROLOG, 0)

        def NORENT(self):
            return self.getToken(Cobol85PreprocessorParser.NORENT, 0)

        def NOSEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEQUENCE, 0)

        def NOSEQ(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEQ, 0)

        def NOSOURCE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSOURCE, 0)

        def NOS(self):
            return self.getToken(Cobol85PreprocessorParser.NOS, 0)

        def NOSPIE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSPIE, 0)

        def NOSQL(self):
            return self.getToken(Cobol85PreprocessorParser.NOSQL, 0)

        def NOSQLCCSID(self):
            return self.getToken(Cobol85PreprocessorParser.NOSQLCCSID, 0)

        def NOSQLC(self):
            return self.getToken(Cobol85PreprocessorParser.NOSQLC, 0)

        def NOSSRANGE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSSRANGE, 0)

        def NOSSR(self):
            return self.getToken(Cobol85PreprocessorParser.NOSSR, 0)

        def NOSTDTRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.NOSTDTRUNC, 0)

        def NOTERMINAL(self):
            return self.getToken(Cobol85PreprocessorParser.NOTERMINAL, 0)

        def NOTERM(self):
            return self.getToken(Cobol85PreprocessorParser.NOTERM, 0)

        def NOTEST(self):
            return self.getToken(Cobol85PreprocessorParser.NOTEST, 0)

        def NOTHREAD(self):
            return self.getToken(Cobol85PreprocessorParser.NOTHREAD, 0)

        def NOVBREF(self):
            return self.getToken(Cobol85PreprocessorParser.NOVBREF, 0)

        def NOWORD(self):
            return self.getToken(Cobol85PreprocessorParser.NOWORD, 0)

        def NOWD(self):
            return self.getToken(Cobol85PreprocessorParser.NOWD, 0)

        def NSEQ(self):
            return self.getToken(Cobol85PreprocessorParser.NSEQ, 0)

        def NSYMBOL(self):
            return self.getToken(Cobol85PreprocessorParser.NSYMBOL, 0)

        def NS(self):
            return self.getToken(Cobol85PreprocessorParser.NS, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85PreprocessorParser.NATIONAL, 0)

        def NAT(self):
            return self.getToken(Cobol85PreprocessorParser.NAT, 0)

        def NOXREF(self):
            return self.getToken(Cobol85PreprocessorParser.NOXREF, 0)

        def NOX(self):
            return self.getToken(Cobol85PreprocessorParser.NOX, 0)

        def NOZWB(self):
            return self.getToken(Cobol85PreprocessorParser.NOZWB, 0)

        def NUMBER(self):
            return self.getToken(Cobol85PreprocessorParser.NUMBER, 0)

        def NUM(self):
            return self.getToken(Cobol85PreprocessorParser.NUM, 0)

        def NUMPROC(self):
            return self.getToken(Cobol85PreprocessorParser.NUMPROC, 0)

        def MIG(self):
            return self.getToken(Cobol85PreprocessorParser.MIG, 0)

        def NOPFD(self):
            return self.getToken(Cobol85PreprocessorParser.NOPFD, 0)

        def PFD(self):
            return self.getToken(Cobol85PreprocessorParser.PFD, 0)

        def OBJECT(self):
            return self.getToken(Cobol85PreprocessorParser.OBJECT, 0)

        def OBJ(self):
            return self.getToken(Cobol85PreprocessorParser.OBJ, 0)

        def OFFSET(self):
            return self.getToken(Cobol85PreprocessorParser.OFFSET, 0)

        def OFF(self):
            return self.getToken(Cobol85PreprocessorParser.OFF, 0)

        def OPMARGINS(self):
            return self.getToken(Cobol85PreprocessorParser.OPMARGINS, 0)

        def OPSEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.OPSEQUENCE, 0)

        def OPTIMIZE(self):
            return self.getToken(Cobol85PreprocessorParser.OPTIMIZE, 0)

        def OPT(self):
            return self.getToken(Cobol85PreprocessorParser.OPT, 0)

        def FULL(self):
            return self.getToken(Cobol85PreprocessorParser.FULL, 0)

        def STD(self):
            return self.getToken(Cobol85PreprocessorParser.STD, 0)

        def OPTFILE(self):
            return self.getToken(Cobol85PreprocessorParser.OPTFILE, 0)

        def OPTIONS(self):
            return self.getToken(Cobol85PreprocessorParser.OPTIONS, 0)

        def OP(self):
            return self.getToken(Cobol85PreprocessorParser.OP, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def OUTDD(self):
            return self.getToken(Cobol85PreprocessorParser.OUTDD, 0)

        def OUT(self):
            return self.getToken(Cobol85PreprocessorParser.OUT, 0)

        def PGMNAME(self):
            return self.getToken(Cobol85PreprocessorParser.PGMNAME, 0)

        def PGMN(self):
            return self.getToken(Cobol85PreprocessorParser.PGMN, 0)

        def CO(self):
            return self.getToken(Cobol85PreprocessorParser.CO, 0)

        def LM(self):
            return self.getToken(Cobol85PreprocessorParser.LM, 0)

        def LONGMIXED(self):
            return self.getToken(Cobol85PreprocessorParser.LONGMIXED, 0)

        def LONGUPPER(self):
            return self.getToken(Cobol85PreprocessorParser.LONGUPPER, 0)

        def LU(self):
            return self.getToken(Cobol85PreprocessorParser.LU, 0)

        def MIXED(self):
            return self.getToken(Cobol85PreprocessorParser.MIXED, 0)

        def UPPER(self):
            return self.getToken(Cobol85PreprocessorParser.UPPER, 0)

        def PROLOG(self):
            return self.getToken(Cobol85PreprocessorParser.PROLOG, 0)

        def QUOTE(self):
            return self.getToken(Cobol85PreprocessorParser.QUOTE, 0)

        def Q_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.Q_CHAR, 0)

        def RENT(self):
            return self.getToken(Cobol85PreprocessorParser.RENT, 0)

        def RMODE(self):
            return self.getToken(Cobol85PreprocessorParser.RMODE, 0)

        def ANY(self):
            return self.getToken(Cobol85PreprocessorParser.ANY, 0)

        def AUTO(self):
            return self.getToken(Cobol85PreprocessorParser.AUTO, 0)

        def SEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.SEQUENCE, 0)

        def SEQ(self):
            return self.getToken(Cobol85PreprocessorParser.SEQ, 0)

        def SIZE(self):
            return self.getToken(Cobol85PreprocessorParser.SIZE, 0)

        def SZ(self):
            return self.getToken(Cobol85PreprocessorParser.SZ, 0)

        def MAX(self):
            return self.getToken(Cobol85PreprocessorParser.MAX, 0)

        def SOURCE(self):
            return self.getToken(Cobol85PreprocessorParser.SOURCE, 0)

        def SP(self):
            return self.getToken(Cobol85PreprocessorParser.SP, 0)

        def SPACE(self):
            return self.getToken(Cobol85PreprocessorParser.SPACE, 0)

        def SPIE(self):
            return self.getToken(Cobol85PreprocessorParser.SPIE, 0)

        def SQL(self):
            return self.getToken(Cobol85PreprocessorParser.SQL, 0)

        def SQLCCSID(self):
            return self.getToken(Cobol85PreprocessorParser.SQLCCSID, 0)

        def SQLC(self):
            return self.getToken(Cobol85PreprocessorParser.SQLC, 0)

        def SSRANGE(self):
            return self.getToken(Cobol85PreprocessorParser.SSRANGE, 0)

        def SSR(self):
            return self.getToken(Cobol85PreprocessorParser.SSR, 0)

        def SYSEIB(self):
            return self.getToken(Cobol85PreprocessorParser.SYSEIB, 0)

        def TERMINAL(self):
            return self.getToken(Cobol85PreprocessorParser.TERMINAL, 0)

        def TERM(self):
            return self.getToken(Cobol85PreprocessorParser.TERM, 0)

        def TEST(self):
            return self.getToken(Cobol85PreprocessorParser.TEST, 0)

        def HOOK(self):
            return self.getToken(Cobol85PreprocessorParser.HOOK, 0)

        def NOHOOK(self):
            return self.getToken(Cobol85PreprocessorParser.NOHOOK, 0)

        def SEP(self):
            return self.getToken(Cobol85PreprocessorParser.SEP, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85PreprocessorParser.SEPARATE, 0)

        def NOSEP(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEP, 0)

        def NOSEPARATE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEPARATE, 0)

        def EJPD(self):
            return self.getToken(Cobol85PreprocessorParser.EJPD, 0)

        def NOEJPD(self):
            return self.getToken(Cobol85PreprocessorParser.NOEJPD, 0)

        def THREAD(self):
            return self.getToken(Cobol85PreprocessorParser.THREAD, 0)

        def TRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.TRUNC, 0)

        def BIN(self):
            return self.getToken(Cobol85PreprocessorParser.BIN, 0)

        def VBREF(self):
            return self.getToken(Cobol85PreprocessorParser.VBREF, 0)

        def WORD(self):
            return self.getToken(Cobol85PreprocessorParser.WORD, 0)

        def WD(self):
            return self.getToken(Cobol85PreprocessorParser.WD, 0)

        def XMLPARSE(self):
            return self.getToken(Cobol85PreprocessorParser.XMLPARSE, 0)

        def XP(self):
            return self.getToken(Cobol85PreprocessorParser.XP, 0)

        def XMLSS(self):
            return self.getToken(Cobol85PreprocessorParser.XMLSS, 0)

        def X_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.X_CHAR, 0)

        def XREF(self):
            return self.getToken(Cobol85PreprocessorParser.XREF, 0)

        def SHORT(self):
            return self.getToken(Cobol85PreprocessorParser.SHORT, 0)

        def YEARWINDOW(self):
            return self.getToken(Cobol85PreprocessorParser.YEARWINDOW, 0)

        def YW(self):
            return self.getToken(Cobol85PreprocessorParser.YW, 0)

        def ZWB(self):
            return self.getToken(Cobol85PreprocessorParser.ZWB, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_compilerOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilerOption" ):
                listener.enterCompilerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilerOption" ):
                listener.exitCompilerOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilerOption" ):
                return visitor.visitCompilerOption(self)
            else:
                return visitor.visitChildren(self)




    def compilerOption(self):

        localctx = Cobol85PreprocessorParser.CompilerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_compilerOption)
        self._la = 0 # Token type
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 103
                self.match(Cobol85PreprocessorParser.ADATA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 104
                self.match(Cobol85PreprocessorParser.ADV)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 105
                self.match(Cobol85PreprocessorParser.APOST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 106
                _la = self._input.LA(1)
                if not(_la==7 or _la==8):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 107
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 108
                _la = self._input.LA(1)
                if not(_la==23 or _la==59 or _la==268 or _la==270):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 109
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 110
                self.match(Cobol85PreprocessorParser.AWO)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 111
                self.match(Cobol85PreprocessorParser.BLOCK0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 112
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 113
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 114
                self.literal()
                self.state = 115
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 117
                self.match(Cobol85PreprocessorParser.CBLCARD)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 118
                self.match(Cobol85PreprocessorParser.CICS)
                self.state = 123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 119
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 120
                    self.literal()
                    self.state = 121
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 125
                self.match(Cobol85PreprocessorParser.COBOL2)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 126
                self.match(Cobol85PreprocessorParser.COBOL3)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 127
                _la = self._input.LA(1)
                if not(_la==22 or _la==26):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 128
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 129
                self.literal()
                self.state = 130
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 132
                _la = self._input.LA(1)
                if not(_la==24 or _la==268):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 133
                self.match(Cobol85PreprocessorParser.CPP)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 134
                self.match(Cobol85PreprocessorParser.CPSM)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 135
                _la = self._input.LA(1)
                if not(_la==30 or _la==31):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 136
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 137
                self.literal()
                self.state = 138
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 140
                self.match(Cobol85PreprocessorParser.DATA)
                self.state = 141
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 142
                self.literal()
                self.state = 143
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 145
                _la = self._input.LA(1)
                if not(_la==33 or _la==41):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 146
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==62 or _la==139:
                        self.state = 147
                        _la = self._input.LA(1)
                        if not(_la==62 or _la==139):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 151
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==282:
                        self.state = 150
                        self.match(Cobol85PreprocessorParser.COMMACHAR)


                    self.state = 154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==184 or _la==253:
                        self.state = 153
                        _la = self._input.LA(1)
                        if not(_la==184 or _la==253):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 156
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 159
                self.match(Cobol85PreprocessorParser.DBCS)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 160
                _la = self._input.LA(1)
                if not(_la==37 or _la==269):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 161
                self.match(Cobol85PreprocessorParser.DEBUG)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 162
                _la = self._input.LA(1)
                if not(_la==38 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 163
                self.match(Cobol85PreprocessorParser.DLL)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 164
                _la = self._input.LA(1)
                if not(_la==43 or _la==44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 165
                _la = self._input.LA(1)
                if not(_la==45 or _la==46):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 166
                self.match(Cobol85PreprocessorParser.EDF)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 167
                self.match(Cobol85PreprocessorParser.EPILOG)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 168
                self.match(Cobol85PreprocessorParser.EXIT)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 169
                _la = self._input.LA(1)
                if not(_la==57 or _la==58):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 170
                _la = self._input.LA(1)
                if not(_la==60 or _la==64):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 171
                self.match(Cobol85PreprocessorParser.FEPI)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 172
                _la = self._input.LA(1)
                if not(_la==62 or _la==271):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 173
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 174
                _la = self._input.LA(1)
                if not(((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 905) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 175
                    self.match(Cobol85PreprocessorParser.COMMACHAR)
                    self.state = 176
                    _la = self._input.LA(1)
                    if not(((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 905) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 179
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 180
                self.match(Cobol85PreprocessorParser.FLAGSTD)
                self.state = 181
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 182
                _la = self._input.LA(1)
                if not(((((_la - 272)) & ~0x3f) == 0 and ((1 << (_la - 272)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 183
                    self.match(Cobol85PreprocessorParser.COMMACHAR)
                    self.state = 184
                    _la = self._input.LA(1)
                    if not(_la==35 or _la==101 or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & 86167781377) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 187
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 188
                self.match(Cobol85PreprocessorParser.GDS)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 189
                self.match(Cobol85PreprocessorParser.GRAPHIC)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 190
                self.match(Cobol85PreprocessorParser.INTDATE)
                self.state = 191
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 192
                _la = self._input.LA(1)
                if not(_la==4 or _la==80):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 193
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 194
                _la = self._input.LA(1)
                if not(_la==74 or _la==75):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 195
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 196
                _la = self._input.LA(1)
                if not(((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 30786331869185) != 0) or _la==255):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 197
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 198
                self.match(Cobol85PreprocessorParser.LEASM)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 199
                self.match(Cobol85PreprocessorParser.LENGTH)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 200
                self.match(Cobol85PreprocessorParser.LIB)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 201
                self.match(Cobol85PreprocessorParser.LIN)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 202
                _la = self._input.LA(1)
                if not(_la==76 or _la==82):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 203
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 204
                self.literal()
                self.state = 205
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 207
                self.match(Cobol85PreprocessorParser.LINKAGE)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 208
                self.match(Cobol85PreprocessorParser.LIST)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 209
                self.match(Cobol85PreprocessorParser.MAP)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 210
                self.match(Cobol85PreprocessorParser.MARGINS)
                self.state = 211
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 212
                self.literal()
                self.state = 213
                self.match(Cobol85PreprocessorParser.COMMACHAR)
                self.state = 214
                self.literal()
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 215
                    self.match(Cobol85PreprocessorParser.COMMACHAR)
                    self.state = 216
                    self.literal()


                self.state = 219
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 221
                _la = self._input.LA(1)
                if not(_la==93 or _la==94):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 222
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 223
                    _la = self._input.LA(1)
                    if not(_la==24 or _la==108 or _la==112 or _la==268):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 224
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 227
                self.match(Cobol85PreprocessorParser.NAME)
                self.state = 231
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 228
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 229
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==105):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 230
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 233
                self.match(Cobol85PreprocessorParser.NATLANG)
                self.state = 234
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 235
                _la = self._input.LA(1)
                if not(((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 17592188141569) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 236
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 237
                self.match(Cobol85PreprocessorParser.NOADATA)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 238
                self.match(Cobol85PreprocessorParser.NOADV)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 239
                self.match(Cobol85PreprocessorParser.NOAWO)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 240
                self.match(Cobol85PreprocessorParser.NOBLOCK0)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 241
                self.match(Cobol85PreprocessorParser.NOCBLCARD)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 242
                self.match(Cobol85PreprocessorParser.NOCICS)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 243
                self.match(Cobol85PreprocessorParser.NOCMPR2)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 244
                _la = self._input.LA(1)
                if not(_la==108 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 245
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 246
                    _la = self._input.LA(1)
                    if not(((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 641) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 247
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 250
                self.match(Cobol85PreprocessorParser.NOCPSM)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 251
                _la = self._input.LA(1)
                if not(_la==114 or _la==115):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 252
                _la = self._input.LA(1)
                if not(_la==117 or _la==126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 253
                self.match(Cobol85PreprocessorParser.NODBCS)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 254
                self.match(Cobol85PreprocessorParser.NODEBUG)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 255
                _la = self._input.LA(1)
                if not(_la==116 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 256
                self.match(Cobol85PreprocessorParser.NODLL)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 257
                self.match(Cobol85PreprocessorParser.NODE)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 258
                _la = self._input.LA(1)
                if not(_la==124 or _la==125):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 259
                _la = self._input.LA(1)
                if not(_la==122 or _la==127):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 260
                _la = self._input.LA(1)
                if not(_la==128 or _la==129):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 261
                self.match(Cobol85PreprocessorParser.NOEDF)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 262
                self.match(Cobol85PreprocessorParser.NOEPILOG)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 263
                self.match(Cobol85PreprocessorParser.NOEXIT)
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 264
                _la = self._input.LA(1)
                if not(_la==134 or _la==135):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 265
                _la = self._input.LA(1)
                if not(_la==137 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 266
                self.match(Cobol85PreprocessorParser.NOFEPI)
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 267
                _la = self._input.LA(1)
                if not(_la==136 or _la==139):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 268
                self.match(Cobol85PreprocessorParser.NOFLAGMIG)
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 269
                self.match(Cobol85PreprocessorParser.NOFLAGSTD)
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 270
                self.match(Cobol85PreprocessorParser.NOGRAPHIC)
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 271
                self.match(Cobol85PreprocessorParser.NOLENGTH)
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 272
                self.match(Cobol85PreprocessorParser.NOLIB)
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 273
                self.match(Cobol85PreprocessorParser.NOLINKAGE)
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 274
                self.match(Cobol85PreprocessorParser.NOLIST)
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 275
                self.match(Cobol85PreprocessorParser.NOMAP)
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 276
                _la = self._input.LA(1)
                if not(_la==150 or _la==151):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 277
                self.match(Cobol85PreprocessorParser.NONAME)
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 278
                _la = self._input.LA(1)
                if not(_la==153 or _la==154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 279
                _la = self._input.LA(1)
                if not(_la==155 or _la==156):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 280
                _la = self._input.LA(1)
                if not(_la==157 or _la==158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 281
                self.match(Cobol85PreprocessorParser.NOOPSEQUENCE)
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 282
                _la = self._input.LA(1)
                if not(_la==160 or _la==161):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 91:
                self.enterOuterAlt(localctx, 91)
                self.state = 283
                self.match(Cobol85PreprocessorParser.NOOPTIONS)
                pass

            elif la_ == 92:
                self.enterOuterAlt(localctx, 92)
                self.state = 284
                self.match(Cobol85PreprocessorParser.NOP)
                pass

            elif la_ == 93:
                self.enterOuterAlt(localctx, 93)
                self.state = 285
                self.match(Cobol85PreprocessorParser.NOPROLOG)
                pass

            elif la_ == 94:
                self.enterOuterAlt(localctx, 94)
                self.state = 286
                self.match(Cobol85PreprocessorParser.NORENT)
                pass

            elif la_ == 95:
                self.enterOuterAlt(localctx, 95)
                self.state = 287
                _la = self._input.LA(1)
                if not(_la==170 or _la==179):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 96:
                self.enterOuterAlt(localctx, 96)
                self.state = 288
                _la = self._input.LA(1)
                if not(_la==167 or _la==171):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 97:
                self.enterOuterAlt(localctx, 97)
                self.state = 289
                self.match(Cobol85PreprocessorParser.NOSPIE)
                pass

            elif la_ == 98:
                self.enterOuterAlt(localctx, 98)
                self.state = 290
                self.match(Cobol85PreprocessorParser.NOSQL)
                pass

            elif la_ == 99:
                self.enterOuterAlt(localctx, 99)
                self.state = 291
                _la = self._input.LA(1)
                if not(_la==174 or _la==175):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 100:
                self.enterOuterAlt(localctx, 100)
                self.state = 292
                _la = self._input.LA(1)
                if not(_la==176 or _la==177):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 101:
                self.enterOuterAlt(localctx, 101)
                self.state = 293
                self.match(Cobol85PreprocessorParser.NOSTDTRUNC)
                pass

            elif la_ == 102:
                self.enterOuterAlt(localctx, 102)
                self.state = 294
                _la = self._input.LA(1)
                if not(_la==180 or _la==181):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 103:
                self.enterOuterAlt(localctx, 103)
                self.state = 295
                self.match(Cobol85PreprocessorParser.NOTEST)
                pass

            elif la_ == 104:
                self.enterOuterAlt(localctx, 104)
                self.state = 296
                self.match(Cobol85PreprocessorParser.NOTHREAD)
                pass

            elif la_ == 105:
                self.enterOuterAlt(localctx, 105)
                self.state = 297
                self.match(Cobol85PreprocessorParser.NOVBREF)
                pass

            elif la_ == 106:
                self.enterOuterAlt(localctx, 106)
                self.state = 298
                _la = self._input.LA(1)
                if not(_la==186 or _la==187):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 107:
                self.enterOuterAlt(localctx, 107)
                self.state = 299
                self.match(Cobol85PreprocessorParser.NSEQ)
                pass

            elif la_ == 108:
                self.enterOuterAlt(localctx, 108)
                self.state = 300
                _la = self._input.LA(1)
                if not(_la==191 or _la==193):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 301
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 302
                _la = self._input.LA(1)
                if not(_la==34 or _la==98 or _la==99):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 303
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 109:
                self.enterOuterAlt(localctx, 109)
                self.state = 304
                self.match(Cobol85PreprocessorParser.NOVBREF)
                pass

            elif la_ == 110:
                self.enterOuterAlt(localctx, 110)
                self.state = 305
                _la = self._input.LA(1)
                if not(_la==188 or _la==189):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 111:
                self.enterOuterAlt(localctx, 111)
                self.state = 306
                self.match(Cobol85PreprocessorParser.NOZWB)
                pass

            elif la_ == 112:
                self.enterOuterAlt(localctx, 112)
                self.state = 307
                _la = self._input.LA(1)
                if not(_la==194 or _la==195):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 113:
                self.enterOuterAlt(localctx, 113)
                self.state = 308
                self.match(Cobol85PreprocessorParser.NUMPROC)
                self.state = 309
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 310
                _la = self._input.LA(1)
                if not(_la==95 or _la==164 or _la==212):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 311
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 114:
                self.enterOuterAlt(localctx, 114)
                self.state = 312
                _la = self._input.LA(1)
                if not(_la==197 or _la==198):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 115:
                self.enterOuterAlt(localctx, 115)
                self.state = 313
                _la = self._input.LA(1)
                if not(_la==200 or _la==201):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 116:
                self.enterOuterAlt(localctx, 116)
                self.state = 314
                self.match(Cobol85PreprocessorParser.OPMARGINS)
                self.state = 315
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 316
                self.literal()
                self.state = 317
                self.match(Cobol85PreprocessorParser.COMMACHAR)
                self.state = 318
                self.literal()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==282:
                    self.state = 319
                    self.match(Cobol85PreprocessorParser.COMMACHAR)
                    self.state = 320
                    self.literal()


                self.state = 323
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 117:
                self.enterOuterAlt(localctx, 117)
                self.state = 325
                self.match(Cobol85PreprocessorParser.OPSEQUENCE)
                self.state = 326
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 327
                self.literal()
                self.state = 328
                self.match(Cobol85PreprocessorParser.COMMACHAR)
                self.state = 329
                self.literal()
                self.state = 330
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 118:
                self.enterOuterAlt(localctx, 118)
                self.state = 332
                _la = self._input.LA(1)
                if not(_la==206 or _la==208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 333
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 334
                    _la = self._input.LA(1)
                    if not(_la==65 or _la==244):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 335
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 119:
                self.enterOuterAlt(localctx, 119)
                self.state = 338
                self.match(Cobol85PreprocessorParser.OPTFILE)
                pass

            elif la_ == 120:
                self.enterOuterAlt(localctx, 120)
                self.state = 339
                self.match(Cobol85PreprocessorParser.OPTIONS)
                pass

            elif la_ == 121:
                self.enterOuterAlt(localctx, 121)
                self.state = 340
                self.match(Cobol85PreprocessorParser.OP)
                pass

            elif la_ == 122:
                self.enterOuterAlt(localctx, 122)
                self.state = 341
                _la = self._input.LA(1)
                if not(_la==210 or _la==211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 342
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 343
                self.cobolWord()
                self.state = 344
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 123:
                self.enterOuterAlt(localctx, 123)
                self.state = 346
                _la = self._input.LA(1)
                if not(_la==214 or _la==215):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 347
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 348
                _la = self._input.LA(1)
                if not(_la==19 or _la==23 or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 2071) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4456449) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 349
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 124:
                self.enterOuterAlt(localctx, 124)
                self.state = 350
                self.match(Cobol85PreprocessorParser.PROLOG)
                pass

            elif la_ == 125:
                self.enterOuterAlt(localctx, 125)
                self.state = 351
                _la = self._input.LA(1)
                if not(_la==218 or _la==276):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 126:
                self.enterOuterAlt(localctx, 126)
                self.state = 352
                self.match(Cobol85PreprocessorParser.RENT)
                pass

            elif la_ == 127:
                self.enterOuterAlt(localctx, 127)
                self.state = 353
                self.match(Cobol85PreprocessorParser.RMODE)
                self.state = 354
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [5]:
                    self.state = 355
                    self.match(Cobol85PreprocessorParser.ANY)
                    pass
                elif token in [9]:
                    self.state = 356
                    self.match(Cobol85PreprocessorParser.AUTO)
                    pass
                elif token in [285, 286]:
                    self.state = 357
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 360
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 128:
                self.enterOuterAlt(localctx, 128)
                self.state = 361
                _la = self._input.LA(1)
                if not(_la==226 or _la==227):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 368
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 362
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 363
                    self.literal()
                    self.state = 364
                    self.match(Cobol85PreprocessorParser.COMMACHAR)
                    self.state = 365
                    self.literal()
                    self.state = 366
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 129:
                self.enterOuterAlt(localctx, 129)
                self.state = 370
                _la = self._input.LA(1)
                if not(_la==229 or _la==247):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 371
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [92]:
                    self.state = 372
                    self.match(Cobol85PreprocessorParser.MAX)
                    pass
                elif token in [285, 286]:
                    self.state = 373
                    self.literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 376
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 130:
                self.enterOuterAlt(localctx, 130)
                self.state = 377
                _la = self._input.LA(1)
                if not(_la==230 or _la==277):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 131:
                self.enterOuterAlt(localctx, 131)
                self.state = 378
                self.match(Cobol85PreprocessorParser.SP)
                pass

            elif la_ == 132:
                self.enterOuterAlt(localctx, 132)
                self.state = 379
                self.match(Cobol85PreprocessorParser.SPACE)
                self.state = 380
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 381
                self.literal()
                self.state = 382
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 133:
                self.enterOuterAlt(localctx, 133)
                self.state = 384
                self.match(Cobol85PreprocessorParser.SPIE)
                pass

            elif la_ == 134:
                self.enterOuterAlt(localctx, 134)
                self.state = 385
                self.match(Cobol85PreprocessorParser.SQL)
                self.state = 390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 386
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 387
                    self.literal()
                    self.state = 388
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 135:
                self.enterOuterAlt(localctx, 135)
                self.state = 392
                _la = self._input.LA(1)
                if not(_la==235 or _la==236):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 136:
                self.enterOuterAlt(localctx, 136)
                self.state = 393
                _la = self._input.LA(1)
                if not(_la==242 or _la==243):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 137:
                self.enterOuterAlt(localctx, 137)
                self.state = 394
                self.match(Cobol85PreprocessorParser.SYSEIB)
                pass

            elif la_ == 138:
                self.enterOuterAlt(localctx, 138)
                self.state = 395
                _la = self._input.LA(1)
                if not(_la==248 or _la==249):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 139:
                self.enterOuterAlt(localctx, 139)
                self.state = 396
                self.match(Cobol85PreprocessorParser.TEST)
                self.state = 414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 397
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==68 or _la==144:
                        self.state = 398
                        _la = self._input.LA(1)
                        if not(_la==68 or _la==144):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 402
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                    if la_ == 1:
                        self.state = 401
                        self.match(Cobol85PreprocessorParser.COMMACHAR)


                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 216172782113783811) != 0):
                        self.state = 404
                        _la = self._input.LA(1)
                        if not(((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 216172782113783811) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==282:
                        self.state = 407
                        self.match(Cobol85PreprocessorParser.COMMACHAR)


                    self.state = 411
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==49 or _la==131:
                        self.state = 410
                        _la = self._input.LA(1)
                        if not(_la==49 or _la==131):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 413
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 140:
                self.enterOuterAlt(localctx, 140)
                self.state = 416
                self.match(Cobol85PreprocessorParser.THREAD)
                pass

            elif la_ == 141:
                self.enterOuterAlt(localctx, 141)
                self.state = 417
                self.match(Cobol85PreprocessorParser.TRUNC)
                self.state = 418
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 419
                _la = self._input.LA(1)
                if not(_la==11 or _la==206 or _la==244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 420
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 142:
                self.enterOuterAlt(localctx, 142)
                self.state = 421
                self.match(Cobol85PreprocessorParser.VBREF)
                pass

            elif la_ == 143:
                self.enterOuterAlt(localctx, 143)
                self.state = 422
                _la = self._input.LA(1)
                if not(_la==258 or _la==259):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 423
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 424
                self.cobolWord()
                self.state = 425
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 144:
                self.enterOuterAlt(localctx, 144)
                self.state = 427
                _la = self._input.LA(1)
                if not(_la==260 or _la==263):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 428
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 429
                _la = self._input.LA(1)
                if not(_la==23 or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 524417) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 430
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 145:
                self.enterOuterAlt(localctx, 145)
                self.state = 431
                _la = self._input.LA(1)
                if not(_la==264 or _la==280):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 432
                    self.match(Cobol85PreprocessorParser.LPARENCHAR)
                    self.state = 434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65 or _la==228:
                        self.state = 433
                        _la = self._input.LA(1)
                        if not(_la==65 or _la==228):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 436
                    self.match(Cobol85PreprocessorParser.RPARENCHAR)


                pass

            elif la_ == 146:
                self.enterOuterAlt(localctx, 146)
                self.state = 439
                _la = self._input.LA(1)
                if not(_la==265 or _la==266):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 440
                self.match(Cobol85PreprocessorParser.LPARENCHAR)
                self.state = 441
                self.literal()
                self.state = 442
                self.match(Cobol85PreprocessorParser.RPARENCHAR)
                pass

            elif la_ == 147:
                self.enterOuterAlt(localctx, 147)
                self.state = 444
                self.match(Cobol85PreprocessorParser.ZWB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecCicsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(Cobol85PreprocessorParser.EXEC, 0)

        def CICS(self):
            return self.getToken(Cobol85PreprocessorParser.CICS, 0)

        def charData(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataContext,0)


        def END_EXEC(self):
            return self.getToken(Cobol85PreprocessorParser.END_EXEC, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_execCicsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecCicsStatement" ):
                listener.enterExecCicsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecCicsStatement" ):
                listener.exitExecCicsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecCicsStatement" ):
                return visitor.visitExecCicsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execCicsStatement(self):

        localctx = Cobol85PreprocessorParser.ExecCicsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_execCicsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(Cobol85PreprocessorParser.EXEC)
            self.state = 448
            self.match(Cobol85PreprocessorParser.CICS)
            self.state = 449
            self.charData()
            self.state = 450
            self.match(Cobol85PreprocessorParser.END_EXEC)
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 451
                self.match(Cobol85PreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(Cobol85PreprocessorParser.EXEC, 0)

        def SQL(self):
            return self.getToken(Cobol85PreprocessorParser.SQL, 0)

        def charDataSql(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataSqlContext,0)


        def END_EXEC(self):
            return self.getToken(Cobol85PreprocessorParser.END_EXEC, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_execSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlStatement" ):
                listener.enterExecSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlStatement" ):
                listener.exitExecSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlStatement" ):
                return visitor.visitExecSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlStatement(self):

        localctx = Cobol85PreprocessorParser.ExecSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_execSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(Cobol85PreprocessorParser.EXEC)
            self.state = 455
            self.match(Cobol85PreprocessorParser.SQL)
            self.state = 456
            self.charDataSql()
            self.state = 457
            self.match(Cobol85PreprocessorParser.END_EXEC)
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 458
                self.match(Cobol85PreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecSqlImsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXEC(self):
            return self.getToken(Cobol85PreprocessorParser.EXEC, 0)

        def SQLIMS(self):
            return self.getToken(Cobol85PreprocessorParser.SQLIMS, 0)

        def charData(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataContext,0)


        def END_EXEC(self):
            return self.getToken(Cobol85PreprocessorParser.END_EXEC, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_execSqlImsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecSqlImsStatement" ):
                listener.enterExecSqlImsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecSqlImsStatement" ):
                listener.exitExecSqlImsStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecSqlImsStatement" ):
                return visitor.visitExecSqlImsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlImsStatement(self):

        localctx = Cobol85PreprocessorParser.ExecSqlImsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_execSqlImsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(Cobol85PreprocessorParser.EXEC)
            self.state = 462
            self.match(Cobol85PreprocessorParser.SQLIMS)
            self.state = 463
            self.charData()
            self.state = 464
            self.match(Cobol85PreprocessorParser.END_EXEC)
            self.state = 466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 465
                self.match(Cobol85PreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(Cobol85PreprocessorParser.COPY, 0)

        def copySource(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CopySourceContext,0)


        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def directoryPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.DirectoryPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.DirectoryPhraseContext,i)


        def familyPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.FamilyPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.FamilyPhraseContext,i)


        def replacingPhrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ReplacingPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplacingPhraseContext,i)


        def SUPPRESS(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.SUPPRESS)
            else:
                return self.getToken(Cobol85PreprocessorParser.SUPPRESS, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_copyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyStatement" ):
                listener.enterCopyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyStatement" ):
                listener.exitCopyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyStatement" ):
                return visitor.visitCopyStatement(self)
            else:
                return visitor.visitChildren(self)




    def copyStatement(self):

        localctx = Cobol85PreprocessorParser.CopyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_copyStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.match(Cobol85PreprocessorParser.COPY)
            self.state = 469
            self.copySource()
            self.state = 484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==289:
                        self.state = 470
                        self.match(Cobol85PreprocessorParser.NEWLINE)
                        self.state = 475
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 480
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [69, 199]:
                        self.state = 476
                        self.directoryPhrase()
                        pass
                    elif token in [202]:
                        self.state = 477
                        self.familyPhrase()
                        pass
                    elif token in [221]:
                        self.state = 478
                        self.replacingPhrase()
                        pass
                    elif token in [245]:
                        self.state = 479
                        self.match(Cobol85PreprocessorParser.SUPPRESS)
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==289:
                self.state = 487
                self.match(Cobol85PreprocessorParser.NEWLINE)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 493
            self.match(Cobol85PreprocessorParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopySourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def filename(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.FilenameContext,0)


        def copyLibrary(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CopyLibraryContext,0)


        def OF(self):
            return self.getToken(Cobol85PreprocessorParser.OF, 0)

        def IN(self):
            return self.getToken(Cobol85PreprocessorParser.IN, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_copySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopySource" ):
                listener.enterCopySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopySource" ):
                listener.exitCopySource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopySource" ):
                return visitor.visitCopySource(self)
            else:
                return visitor.visitChildren(self)




    def copySource(self):

        localctx = Cobol85PreprocessorParser.CopySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_copySource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285, 286]:
                self.state = 495
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 287]:
                self.state = 496
                self.cobolWord()
                pass
            elif token in [288]:
                self.state = 497
                self.filename()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 500
                _la = self._input.LA(1)
                if not(_la==69 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501
                self.copyLibrary()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyLibraryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_copyLibrary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyLibrary" ):
                listener.enterCopyLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyLibrary" ):
                listener.exitCopyLibrary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyLibrary" ):
                return visitor.visitCopyLibrary(self)
            else:
                return visitor.visitChildren(self)




    def copyLibrary(self):

        localctx = Cobol85PreprocessorParser.CopyLibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_copyLibrary)
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285, 286]:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 287]:
                self.enterOuterAlt(localctx, 2)
                self.state = 505
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacingPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(Cobol85PreprocessorParser.REPLACING, 0)

        def replaceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ReplaceClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceClauseContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replacingPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacingPhrase" ):
                listener.enterReplacingPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacingPhrase" ):
                listener.exitReplacingPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacingPhrase" ):
                return visitor.visitReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def replacingPhrase(self):

        localctx = Cobol85PreprocessorParser.ReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_replacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(Cobol85PreprocessorParser.REPLACING)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==289:
                self.state = 509
                self.match(Cobol85PreprocessorParser.NEWLINE)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self.replaceClause()
            self.state = 524
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 516
                        self.match(Cobol85PreprocessorParser.NEWLINE)
                        self.state = 519 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==289):
                            break

                    self.state = 521
                    self.replaceClause() 
                self.state = 526
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceAreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replaceByStatement(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceByStatementContext,0)


        def copyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CopyStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CopyStatementContext,i)


        def charData(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CharDataContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataContext,i)


        def replaceOffStatement(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceOffStatementContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replaceArea

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceArea" ):
                listener.enterReplaceArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceArea" ):
                listener.exitReplaceArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceArea" ):
                return visitor.visitReplaceArea(self)
            else:
                return visitor.visitChildren(self)




    def replaceArea(self):

        localctx = Cobol85PreprocessorParser.ReplaceAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_replaceArea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.replaceByStatement()
            self.state = 532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 530
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [25]:
                        self.state = 528
                        self.copyStatement()
                        pass
                    elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 289, 292]:
                        self.state = 529
                        self.charData()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 535
                self.replaceOffStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceByStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(Cobol85PreprocessorParser.REPLACE, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def replaceClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.ReplaceClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceClauseContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replaceByStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceByStatement" ):
                listener.enterReplaceByStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceByStatement" ):
                listener.exitReplaceByStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceByStatement" ):
                return visitor.visitReplaceByStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceByStatement(self):

        localctx = Cobol85PreprocessorParser.ReplaceByStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_replaceByStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(Cobol85PreprocessorParser.REPLACE)
            self.state = 546 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==289:
                        self.state = 539
                        self.match(Cobol85PreprocessorParser.NEWLINE)
                        self.state = 544
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 545
                    self.replaceClause()

                else:
                    raise NoViableAltException(self)
                self.state = 548 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 550
            self.match(Cobol85PreprocessorParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceOffStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(Cobol85PreprocessorParser.REPLACE, 0)

        def OFF(self):
            return self.getToken(Cobol85PreprocessorParser.OFF, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replaceOffStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceOffStatement" ):
                listener.enterReplaceOffStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceOffStatement" ):
                listener.exitReplaceOffStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceOffStatement" ):
                return visitor.visitReplaceOffStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceOffStatement(self):

        localctx = Cobol85PreprocessorParser.ReplaceOffStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_replaceOffStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(Cobol85PreprocessorParser.REPLACE)
            self.state = 553
            self.match(Cobol85PreprocessorParser.OFF)
            self.state = 554
            self.match(Cobol85PreprocessorParser.DOT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def replaceable(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplaceableContext,0)


        def BY(self):
            return self.getToken(Cobol85PreprocessorParser.BY, 0)

        def replacement(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.ReplacementContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def directoryPhrase(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.DirectoryPhraseContext,0)


        def familyPhrase(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.FamilyPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replaceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceClause" ):
                listener.enterReplaceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceClause" ):
                listener.exitReplaceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceClause" ):
                return visitor.visitReplaceClause(self)
            else:
                return visitor.visitChildren(self)




    def replaceClause(self):

        localctx = Cobol85PreprocessorParser.ReplaceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_replaceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.replaceable()
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==289:
                self.state = 557
                self.match(Cobol85PreprocessorParser.NEWLINE)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 563
            self.match(Cobol85PreprocessorParser.BY)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==289:
                self.state = 564
                self.match(Cobol85PreprocessorParser.NEWLINE)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 570
            self.replacement()
            self.state = 578
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==289:
                    self.state = 571
                    self.match(Cobol85PreprocessorParser.NEWLINE)
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 577
                self.directoryPhrase()


            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==289:
                    self.state = 580
                    self.match(Cobol85PreprocessorParser.NEWLINE)
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 586
                self.familyPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(Cobol85PreprocessorParser.OF, 0)

        def IN(self):
            return self.getToken(Cobol85PreprocessorParser.IN, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_directoryPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryPhrase" ):
                listener.enterDirectoryPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryPhrase" ):
                listener.exitDirectoryPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectoryPhrase" ):
                return visitor.visitDirectoryPhrase(self)
            else:
                return visitor.visitChildren(self)




    def directoryPhrase(self):

        localctx = Cobol85PreprocessorParser.DirectoryPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_directoryPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            _la = self._input.LA(1)
            if not(_la==69 or _la==199):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==289:
                self.state = 590
                self.match(Cobol85PreprocessorParser.NEWLINE)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285, 286]:
                self.state = 596
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 287]:
                self.state = 597
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FamilyPhraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cobol85PreprocessorParser.ON, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_familyPhrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFamilyPhrase" ):
                listener.enterFamilyPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFamilyPhrase" ):
                listener.exitFamilyPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFamilyPhrase" ):
                return visitor.visitFamilyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def familyPhrase(self):

        localctx = Cobol85PreprocessorParser.FamilyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_familyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(Cobol85PreprocessorParser.ON)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==289:
                self.state = 601
                self.match(Cobol85PreprocessorParser.NEWLINE)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285, 286]:
                self.state = 607
                self.literal()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 287]:
                self.state = 608
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def pseudoText(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.PseudoTextContext,0)


        def charDataLine(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataLineContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replaceable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceable" ):
                listener.enterReplaceable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceable" ):
                listener.exitReplaceable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceable" ):
                return visitor.visitReplaceable(self)
            else:
                return visitor.visitChildren(self)




    def replaceable(self):

        localctx = Cobol85PreprocessorParser.ReplaceableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_replaceable)
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.cobolWord()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 613
                self.pseudoText()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 614
                self.charDataLine()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,0)


        def pseudoText(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.PseudoTextContext,0)


        def charDataLine(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataLineContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_replacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplacement" ):
                listener.enterReplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplacement" ):
                listener.exitReplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacement" ):
                return visitor.visitReplacement(self)
            else:
                return visitor.visitChildren(self)




    def replacement(self):

        localctx = Cobol85PreprocessorParser.ReplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_replacement)
        try:
            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.cobolWord()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 619
                self.pseudoText()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 620
                self.charDataLine()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EjectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EJECT(self):
            return self.getToken(Cobol85PreprocessorParser.EJECT, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_ejectStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEjectStatement" ):
                listener.enterEjectStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEjectStatement" ):
                listener.exitEjectStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEjectStatement" ):
                return visitor.visitEjectStatement(self)
            else:
                return visitor.visitChildren(self)




    def ejectStatement(self):

        localctx = Cobol85PreprocessorParser.EjectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_ejectStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(Cobol85PreprocessorParser.EJECT)
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 624
                self.match(Cobol85PreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkipStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP1(self):
            return self.getToken(Cobol85PreprocessorParser.SKIP1, 0)

        def SKIP2(self):
            return self.getToken(Cobol85PreprocessorParser.SKIP2, 0)

        def SKIP3(self):
            return self.getToken(Cobol85PreprocessorParser.SKIP3, 0)

        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_skipStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkipStatement" ):
                listener.enterSkipStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkipStatement" ):
                listener.exitSkipStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkipStatement" ):
                return visitor.visitSkipStatement(self)
            else:
                return visitor.visitChildren(self)




    def skipStatement(self):

        localctx = Cobol85PreprocessorParser.SkipStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_skipStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            _la = self._input.LA(1)
            if not(((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 628
                self.match(Cobol85PreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TitleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TITLE(self):
            return self.getToken(Cobol85PreprocessorParser.TITLE, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,0)


        def DOT(self):
            return self.getToken(Cobol85PreprocessorParser.DOT, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_titleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitleStatement" ):
                listener.enterTitleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitleStatement" ):
                listener.exitTitleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTitleStatement" ):
                return visitor.visitTitleStatement(self)
            else:
                return visitor.visitChildren(self)




    def titleStatement(self):

        localctx = Cobol85PreprocessorParser.TitleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_titleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(Cobol85PreprocessorParser.TITLE)
            self.state = 632
            self.literal()
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 633
                self.match(Cobol85PreprocessorParser.DOT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudoTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUALCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.DOUBLEEQUALCHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.DOUBLEEQUALCHAR, i)

        def charData(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_pseudoText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudoText" ):
                listener.enterPseudoText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudoText" ):
                listener.exitPseudoText(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudoText" ):
                return visitor.visitPseudoText(self)
            else:
                return visitor.visitChildren(self)




    def pseudoText(self):

        localctx = Cobol85PreprocessorParser.PseudoTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pseudoText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(Cobol85PreprocessorParser.DOUBLEEQUALCHAR)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -2346375405893844994) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8193) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -288230376151711745) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -9534965104508929) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 85597355895) != 0):
                self.state = 637
                self.charData()


            self.state = 640
            self.match(Cobol85PreprocessorParser.DOUBLEEQUALCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataLineContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_charData

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharData" ):
                listener.enterCharData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharData" ):
                listener.exitCharData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharData" ):
                return visitor.visitCharData(self)
            else:
                return visitor.visitChildren(self)




    def charData(self):

        localctx = Cobol85PreprocessorParser.CharDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_charData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 644
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 292]:
                        self.state = 642
                        self.charDataLine()
                        pass
                    elif token in [289]:
                        self.state = 643
                        self.match(Cobol85PreprocessorParser.NEWLINE)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 646 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataSqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charDataLine(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CharDataLineContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataLineContext,i)


        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.COPY)
            else:
                return self.getToken(Cobol85PreprocessorParser.COPY, i)

        def REPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.REPLACE)
            else:
                return self.getToken(Cobol85PreprocessorParser.REPLACE, i)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.NEWLINE)
            else:
                return self.getToken(Cobol85PreprocessorParser.NEWLINE, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_charDataSql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataSql" ):
                listener.enterCharDataSql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataSql" ):
                listener.exitCharDataSql(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataSql" ):
                return visitor.visitCharDataSql(self)
            else:
                return visitor.visitChildren(self)




    def charDataSql(self):

        localctx = Cobol85PreprocessorParser.CharDataSqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_charDataSql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 652
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 292]:
                    self.state = 648
                    self.charDataLine()
                    pass
                elif token in [25]:
                    self.state = 649
                    self.match(Cobol85PreprocessorParser.COPY)
                    pass
                elif token in [220]:
                    self.state = 650
                    self.match(Cobol85PreprocessorParser.REPLACE)
                    pass
                elif token in [289]:
                    self.state = 651
                    self.match(Cobol85PreprocessorParser.NEWLINE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 654 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -2346375405860290562) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -8193) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -288230376151711745) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -9534964836073473) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 85597355895) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataLineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.CobolWordContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.CobolWordContext,i)


        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.LiteralContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.LiteralContext,i)


        def filename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85PreprocessorParser.FilenameContext)
            else:
                return self.getTypedRuleContext(Cobol85PreprocessorParser.FilenameContext,i)


        def TEXT(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.TEXT)
            else:
                return self.getToken(Cobol85PreprocessorParser.TEXT, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.DOT)
            else:
                return self.getToken(Cobol85PreprocessorParser.DOT, i)

        def LPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.LPARENCHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.LPARENCHAR, i)

        def RPARENCHAR(self, i:int=None):
            if i is None:
                return self.getTokens(Cobol85PreprocessorParser.RPARENCHAR)
            else:
                return self.getToken(Cobol85PreprocessorParser.RPARENCHAR, i)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_charDataLine

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataLine" ):
                listener.enterCharDataLine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataLine" ):
                listener.exitCharDataLine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataLine" ):
                return visitor.visitCharDataLine(self)
            else:
                return visitor.visitChildren(self)




    def charDataLine(self):

        localctx = Cobol85PreprocessorParser.CharDataLineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_charDataLine)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 663
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 287]:
                        self.state = 656
                        self.cobolWord()
                        pass
                    elif token in [285, 286]:
                        self.state = 657
                        self.literal()
                        pass
                    elif token in [288]:
                        self.state = 658
                        self.filename()
                        pass
                    elif token in [292]:
                        self.state = 659
                        self.match(Cobol85PreprocessorParser.TEXT)
                        pass
                    elif token in [283]:
                        self.state = 660
                        self.match(Cobol85PreprocessorParser.DOT)
                        pass
                    elif token in [88]:
                        self.state = 661
                        self.match(Cobol85PreprocessorParser.LPARENCHAR)
                        pass
                    elif token in [223]:
                        self.state = 662
                        self.match(Cobol85PreprocessorParser.RPARENCHAR)
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 665 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CobolWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Cobol85PreprocessorParser.IDENTIFIER, 0)

        def charDataKeyword(self):
            return self.getTypedRuleContext(Cobol85PreprocessorParser.CharDataKeywordContext,0)


        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_cobolWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCobolWord" ):
                listener.enterCobolWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCobolWord" ):
                listener.exitCobolWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCobolWord" ):
                return visitor.visitCobolWord(self)
            else:
                return visitor.visitChildren(self)




    def cobolWord(self):

        localctx = Cobol85PreprocessorParser.CobolWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cobolWord)
        try:
            self.state = 669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [287]:
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.match(Cobol85PreprocessorParser.IDENTIFIER)
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282]:
                self.enterOuterAlt(localctx, 2)
                self.state = 668
                self.charDataKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONNUMERICLITERAL(self):
            return self.getToken(Cobol85PreprocessorParser.NONNUMERICLITERAL, 0)

        def NUMERICLITERAL(self):
            return self.getToken(Cobol85PreprocessorParser.NUMERICLITERAL, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = Cobol85PreprocessorParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            _la = self._input.LA(1)
            if not(_la==285 or _la==286):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILENAME(self):
            return self.getToken(Cobol85PreprocessorParser.FILENAME, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilename" ):
                return visitor.visitFilename(self)
            else:
                return visitor.visitChildren(self)




    def filename(self):

        localctx = Cobol85PreprocessorParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(Cobol85PreprocessorParser.FILENAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharDataKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADATA(self):
            return self.getToken(Cobol85PreprocessorParser.ADATA, 0)

        def ADV(self):
            return self.getToken(Cobol85PreprocessorParser.ADV, 0)

        def ALIAS(self):
            return self.getToken(Cobol85PreprocessorParser.ALIAS, 0)

        def ANSI(self):
            return self.getToken(Cobol85PreprocessorParser.ANSI, 0)

        def ANY(self):
            return self.getToken(Cobol85PreprocessorParser.ANY, 0)

        def APOST(self):
            return self.getToken(Cobol85PreprocessorParser.APOST, 0)

        def AR(self):
            return self.getToken(Cobol85PreprocessorParser.AR, 0)

        def ARITH(self):
            return self.getToken(Cobol85PreprocessorParser.ARITH, 0)

        def AUTO(self):
            return self.getToken(Cobol85PreprocessorParser.AUTO, 0)

        def AWO(self):
            return self.getToken(Cobol85PreprocessorParser.AWO, 0)

        def BIN(self):
            return self.getToken(Cobol85PreprocessorParser.BIN, 0)

        def BLOCK0(self):
            return self.getToken(Cobol85PreprocessorParser.BLOCK0, 0)

        def BUF(self):
            return self.getToken(Cobol85PreprocessorParser.BUF, 0)

        def BUFSIZE(self):
            return self.getToken(Cobol85PreprocessorParser.BUFSIZE, 0)

        def BY(self):
            return self.getToken(Cobol85PreprocessorParser.BY, 0)

        def CBL(self):
            return self.getToken(Cobol85PreprocessorParser.CBL, 0)

        def CBLCARD(self):
            return self.getToken(Cobol85PreprocessorParser.CBLCARD, 0)

        def CO(self):
            return self.getToken(Cobol85PreprocessorParser.CO, 0)

        def COBOL2(self):
            return self.getToken(Cobol85PreprocessorParser.COBOL2, 0)

        def COBOL3(self):
            return self.getToken(Cobol85PreprocessorParser.COBOL3, 0)

        def CODEPAGE(self):
            return self.getToken(Cobol85PreprocessorParser.CODEPAGE, 0)

        def COMMACHAR(self):
            return self.getToken(Cobol85PreprocessorParser.COMMACHAR, 0)

        def COMPAT(self):
            return self.getToken(Cobol85PreprocessorParser.COMPAT, 0)

        def COMPILE(self):
            return self.getToken(Cobol85PreprocessorParser.COMPILE, 0)

        def CP(self):
            return self.getToken(Cobol85PreprocessorParser.CP, 0)

        def CPP(self):
            return self.getToken(Cobol85PreprocessorParser.CPP, 0)

        def CPSM(self):
            return self.getToken(Cobol85PreprocessorParser.CPSM, 0)

        def CS(self):
            return self.getToken(Cobol85PreprocessorParser.CS, 0)

        def CURR(self):
            return self.getToken(Cobol85PreprocessorParser.CURR, 0)

        def CURRENCY(self):
            return self.getToken(Cobol85PreprocessorParser.CURRENCY, 0)

        def DATA(self):
            return self.getToken(Cobol85PreprocessorParser.DATA, 0)

        def DATEPROC(self):
            return self.getToken(Cobol85PreprocessorParser.DATEPROC, 0)

        def DBCS(self):
            return self.getToken(Cobol85PreprocessorParser.DBCS, 0)

        def DD(self):
            return self.getToken(Cobol85PreprocessorParser.DD, 0)

        def DEBUG(self):
            return self.getToken(Cobol85PreprocessorParser.DEBUG, 0)

        def DECK(self):
            return self.getToken(Cobol85PreprocessorParser.DECK, 0)

        def DIAGTRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.DIAGTRUNC, 0)

        def DLI(self):
            return self.getToken(Cobol85PreprocessorParser.DLI, 0)

        def DLL(self):
            return self.getToken(Cobol85PreprocessorParser.DLL, 0)

        def DP(self):
            return self.getToken(Cobol85PreprocessorParser.DP, 0)

        def DTR(self):
            return self.getToken(Cobol85PreprocessorParser.DTR, 0)

        def DU(self):
            return self.getToken(Cobol85PreprocessorParser.DU, 0)

        def DUMP(self):
            return self.getToken(Cobol85PreprocessorParser.DUMP, 0)

        def DYN(self):
            return self.getToken(Cobol85PreprocessorParser.DYN, 0)

        def DYNAM(self):
            return self.getToken(Cobol85PreprocessorParser.DYNAM, 0)

        def EDF(self):
            return self.getToken(Cobol85PreprocessorParser.EDF, 0)

        def EJECT(self):
            return self.getToken(Cobol85PreprocessorParser.EJECT, 0)

        def EJPD(self):
            return self.getToken(Cobol85PreprocessorParser.EJPD, 0)

        def EN(self):
            return self.getToken(Cobol85PreprocessorParser.EN, 0)

        def ENGLISH(self):
            return self.getToken(Cobol85PreprocessorParser.ENGLISH, 0)

        def EPILOG(self):
            return self.getToken(Cobol85PreprocessorParser.EPILOG, 0)

        def EXCI(self):
            return self.getToken(Cobol85PreprocessorParser.EXCI, 0)

        def EXIT(self):
            return self.getToken(Cobol85PreprocessorParser.EXIT, 0)

        def EXP(self):
            return self.getToken(Cobol85PreprocessorParser.EXP, 0)

        def EXPORTALL(self):
            return self.getToken(Cobol85PreprocessorParser.EXPORTALL, 0)

        def EXTEND(self):
            return self.getToken(Cobol85PreprocessorParser.EXTEND, 0)

        def FASTSRT(self):
            return self.getToken(Cobol85PreprocessorParser.FASTSRT, 0)

        def FLAG(self):
            return self.getToken(Cobol85PreprocessorParser.FLAG, 0)

        def FLAGSTD(self):
            return self.getToken(Cobol85PreprocessorParser.FLAGSTD, 0)

        def FULL(self):
            return self.getToken(Cobol85PreprocessorParser.FULL, 0)

        def FSRT(self):
            return self.getToken(Cobol85PreprocessorParser.FSRT, 0)

        def GDS(self):
            return self.getToken(Cobol85PreprocessorParser.GDS, 0)

        def GRAPHIC(self):
            return self.getToken(Cobol85PreprocessorParser.GRAPHIC, 0)

        def HOOK(self):
            return self.getToken(Cobol85PreprocessorParser.HOOK, 0)

        def IN(self):
            return self.getToken(Cobol85PreprocessorParser.IN, 0)

        def INTDATE(self):
            return self.getToken(Cobol85PreprocessorParser.INTDATE, 0)

        def JA(self):
            return self.getToken(Cobol85PreprocessorParser.JA, 0)

        def JP(self):
            return self.getToken(Cobol85PreprocessorParser.JP, 0)

        def KA(self):
            return self.getToken(Cobol85PreprocessorParser.KA, 0)

        def LANG(self):
            return self.getToken(Cobol85PreprocessorParser.LANG, 0)

        def LANGUAGE(self):
            return self.getToken(Cobol85PreprocessorParser.LANGUAGE, 0)

        def LC(self):
            return self.getToken(Cobol85PreprocessorParser.LC, 0)

        def LENGTH(self):
            return self.getToken(Cobol85PreprocessorParser.LENGTH, 0)

        def LIB(self):
            return self.getToken(Cobol85PreprocessorParser.LIB, 0)

        def LILIAN(self):
            return self.getToken(Cobol85PreprocessorParser.LILIAN, 0)

        def LIN(self):
            return self.getToken(Cobol85PreprocessorParser.LIN, 0)

        def LINECOUNT(self):
            return self.getToken(Cobol85PreprocessorParser.LINECOUNT, 0)

        def LINKAGE(self):
            return self.getToken(Cobol85PreprocessorParser.LINKAGE, 0)

        def LIST(self):
            return self.getToken(Cobol85PreprocessorParser.LIST, 0)

        def LM(self):
            return self.getToken(Cobol85PreprocessorParser.LM, 0)

        def LONGMIXED(self):
            return self.getToken(Cobol85PreprocessorParser.LONGMIXED, 0)

        def LONGUPPER(self):
            return self.getToken(Cobol85PreprocessorParser.LONGUPPER, 0)

        def LU(self):
            return self.getToken(Cobol85PreprocessorParser.LU, 0)

        def MAP(self):
            return self.getToken(Cobol85PreprocessorParser.MAP, 0)

        def MARGINS(self):
            return self.getToken(Cobol85PreprocessorParser.MARGINS, 0)

        def MAX(self):
            return self.getToken(Cobol85PreprocessorParser.MAX, 0)

        def MD(self):
            return self.getToken(Cobol85PreprocessorParser.MD, 0)

        def MDECK(self):
            return self.getToken(Cobol85PreprocessorParser.MDECK, 0)

        def MIG(self):
            return self.getToken(Cobol85PreprocessorParser.MIG, 0)

        def MIXED(self):
            return self.getToken(Cobol85PreprocessorParser.MIXED, 0)

        def NAME(self):
            return self.getToken(Cobol85PreprocessorParser.NAME, 0)

        def NAT(self):
            return self.getToken(Cobol85PreprocessorParser.NAT, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85PreprocessorParser.NATIONAL, 0)

        def NATLANG(self):
            return self.getToken(Cobol85PreprocessorParser.NATLANG, 0)

        def NN(self):
            return self.getToken(Cobol85PreprocessorParser.NN, 0)

        def NO(self):
            return self.getToken(Cobol85PreprocessorParser.NO, 0)

        def NOADATA(self):
            return self.getToken(Cobol85PreprocessorParser.NOADATA, 0)

        def NOADV(self):
            return self.getToken(Cobol85PreprocessorParser.NOADV, 0)

        def NOALIAS(self):
            return self.getToken(Cobol85PreprocessorParser.NOALIAS, 0)

        def NOAWO(self):
            return self.getToken(Cobol85PreprocessorParser.NOAWO, 0)

        def NOBLOCK0(self):
            return self.getToken(Cobol85PreprocessorParser.NOBLOCK0, 0)

        def NOC(self):
            return self.getToken(Cobol85PreprocessorParser.NOC, 0)

        def NOCBLCARD(self):
            return self.getToken(Cobol85PreprocessorParser.NOCBLCARD, 0)

        def NOCICS(self):
            return self.getToken(Cobol85PreprocessorParser.NOCICS, 0)

        def NOCMPR2(self):
            return self.getToken(Cobol85PreprocessorParser.NOCMPR2, 0)

        def NOCOMPILE(self):
            return self.getToken(Cobol85PreprocessorParser.NOCOMPILE, 0)

        def NOCPSM(self):
            return self.getToken(Cobol85PreprocessorParser.NOCPSM, 0)

        def NOCURR(self):
            return self.getToken(Cobol85PreprocessorParser.NOCURR, 0)

        def NOCURRENCY(self):
            return self.getToken(Cobol85PreprocessorParser.NOCURRENCY, 0)

        def NOD(self):
            return self.getToken(Cobol85PreprocessorParser.NOD, 0)

        def NODATEPROC(self):
            return self.getToken(Cobol85PreprocessorParser.NODATEPROC, 0)

        def NODBCS(self):
            return self.getToken(Cobol85PreprocessorParser.NODBCS, 0)

        def NODE(self):
            return self.getToken(Cobol85PreprocessorParser.NODE, 0)

        def NODEBUG(self):
            return self.getToken(Cobol85PreprocessorParser.NODEBUG, 0)

        def NODECK(self):
            return self.getToken(Cobol85PreprocessorParser.NODECK, 0)

        def NODIAGTRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.NODIAGTRUNC, 0)

        def NODLL(self):
            return self.getToken(Cobol85PreprocessorParser.NODLL, 0)

        def NODU(self):
            return self.getToken(Cobol85PreprocessorParser.NODU, 0)

        def NODUMP(self):
            return self.getToken(Cobol85PreprocessorParser.NODUMP, 0)

        def NODP(self):
            return self.getToken(Cobol85PreprocessorParser.NODP, 0)

        def NODTR(self):
            return self.getToken(Cobol85PreprocessorParser.NODTR, 0)

        def NODYN(self):
            return self.getToken(Cobol85PreprocessorParser.NODYN, 0)

        def NODYNAM(self):
            return self.getToken(Cobol85PreprocessorParser.NODYNAM, 0)

        def NOEDF(self):
            return self.getToken(Cobol85PreprocessorParser.NOEDF, 0)

        def NOEJPD(self):
            return self.getToken(Cobol85PreprocessorParser.NOEJPD, 0)

        def NOEPILOG(self):
            return self.getToken(Cobol85PreprocessorParser.NOEPILOG, 0)

        def NOEXIT(self):
            return self.getToken(Cobol85PreprocessorParser.NOEXIT, 0)

        def NOEXP(self):
            return self.getToken(Cobol85PreprocessorParser.NOEXP, 0)

        def NOEXPORTALL(self):
            return self.getToken(Cobol85PreprocessorParser.NOEXPORTALL, 0)

        def NOF(self):
            return self.getToken(Cobol85PreprocessorParser.NOF, 0)

        def NOFASTSRT(self):
            return self.getToken(Cobol85PreprocessorParser.NOFASTSRT, 0)

        def NOFEPI(self):
            return self.getToken(Cobol85PreprocessorParser.NOFEPI, 0)

        def NOFLAG(self):
            return self.getToken(Cobol85PreprocessorParser.NOFLAG, 0)

        def NOFLAGMIG(self):
            return self.getToken(Cobol85PreprocessorParser.NOFLAGMIG, 0)

        def NOFLAGSTD(self):
            return self.getToken(Cobol85PreprocessorParser.NOFLAGSTD, 0)

        def NOFSRT(self):
            return self.getToken(Cobol85PreprocessorParser.NOFSRT, 0)

        def NOGRAPHIC(self):
            return self.getToken(Cobol85PreprocessorParser.NOGRAPHIC, 0)

        def NOHOOK(self):
            return self.getToken(Cobol85PreprocessorParser.NOHOOK, 0)

        def NOLENGTH(self):
            return self.getToken(Cobol85PreprocessorParser.NOLENGTH, 0)

        def NOLIB(self):
            return self.getToken(Cobol85PreprocessorParser.NOLIB, 0)

        def NOLINKAGE(self):
            return self.getToken(Cobol85PreprocessorParser.NOLINKAGE, 0)

        def NOLIST(self):
            return self.getToken(Cobol85PreprocessorParser.NOLIST, 0)

        def NOMAP(self):
            return self.getToken(Cobol85PreprocessorParser.NOMAP, 0)

        def NOMD(self):
            return self.getToken(Cobol85PreprocessorParser.NOMD, 0)

        def NOMDECK(self):
            return self.getToken(Cobol85PreprocessorParser.NOMDECK, 0)

        def NONAME(self):
            return self.getToken(Cobol85PreprocessorParser.NONAME, 0)

        def NONUM(self):
            return self.getToken(Cobol85PreprocessorParser.NONUM, 0)

        def NONUMBER(self):
            return self.getToken(Cobol85PreprocessorParser.NONUMBER, 0)

        def NOOBJ(self):
            return self.getToken(Cobol85PreprocessorParser.NOOBJ, 0)

        def NOOBJECT(self):
            return self.getToken(Cobol85PreprocessorParser.NOOBJECT, 0)

        def NOOFF(self):
            return self.getToken(Cobol85PreprocessorParser.NOOFF, 0)

        def NOOFFSET(self):
            return self.getToken(Cobol85PreprocessorParser.NOOFFSET, 0)

        def NOOPSEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPSEQUENCE, 0)

        def NOOPT(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPT, 0)

        def NOOPTIMIZE(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPTIMIZE, 0)

        def NOOPTIONS(self):
            return self.getToken(Cobol85PreprocessorParser.NOOPTIONS, 0)

        def NOP(self):
            return self.getToken(Cobol85PreprocessorParser.NOP, 0)

        def NOPFD(self):
            return self.getToken(Cobol85PreprocessorParser.NOPFD, 0)

        def NOPROLOG(self):
            return self.getToken(Cobol85PreprocessorParser.NOPROLOG, 0)

        def NORENT(self):
            return self.getToken(Cobol85PreprocessorParser.NORENT, 0)

        def NOS(self):
            return self.getToken(Cobol85PreprocessorParser.NOS, 0)

        def NOSEP(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEP, 0)

        def NOSEPARATE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEPARATE, 0)

        def NOSEQ(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEQ, 0)

        def NOSEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSEQUENCE, 0)

        def NOSOURCE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSOURCE, 0)

        def NOSPIE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSPIE, 0)

        def NOSQL(self):
            return self.getToken(Cobol85PreprocessorParser.NOSQL, 0)

        def NOSQLC(self):
            return self.getToken(Cobol85PreprocessorParser.NOSQLC, 0)

        def NOSQLCCSID(self):
            return self.getToken(Cobol85PreprocessorParser.NOSQLCCSID, 0)

        def NOSSR(self):
            return self.getToken(Cobol85PreprocessorParser.NOSSR, 0)

        def NOSSRANGE(self):
            return self.getToken(Cobol85PreprocessorParser.NOSSRANGE, 0)

        def NOSTDTRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.NOSTDTRUNC, 0)

        def NOTERM(self):
            return self.getToken(Cobol85PreprocessorParser.NOTERM, 0)

        def NOTERMINAL(self):
            return self.getToken(Cobol85PreprocessorParser.NOTERMINAL, 0)

        def NOTEST(self):
            return self.getToken(Cobol85PreprocessorParser.NOTEST, 0)

        def NOTHREAD(self):
            return self.getToken(Cobol85PreprocessorParser.NOTHREAD, 0)

        def NOTRIG(self):
            return self.getToken(Cobol85PreprocessorParser.NOTRIG, 0)

        def NOVBREF(self):
            return self.getToken(Cobol85PreprocessorParser.NOVBREF, 0)

        def NOWORD(self):
            return self.getToken(Cobol85PreprocessorParser.NOWORD, 0)

        def NOX(self):
            return self.getToken(Cobol85PreprocessorParser.NOX, 0)

        def NOXREF(self):
            return self.getToken(Cobol85PreprocessorParser.NOXREF, 0)

        def NOZWB(self):
            return self.getToken(Cobol85PreprocessorParser.NOZWB, 0)

        def NSEQ(self):
            return self.getToken(Cobol85PreprocessorParser.NSEQ, 0)

        def NSYMBOL(self):
            return self.getToken(Cobol85PreprocessorParser.NSYMBOL, 0)

        def NS(self):
            return self.getToken(Cobol85PreprocessorParser.NS, 0)

        def NUM(self):
            return self.getToken(Cobol85PreprocessorParser.NUM, 0)

        def NUMBER(self):
            return self.getToken(Cobol85PreprocessorParser.NUMBER, 0)

        def NUMPROC(self):
            return self.getToken(Cobol85PreprocessorParser.NUMPROC, 0)

        def OBJ(self):
            return self.getToken(Cobol85PreprocessorParser.OBJ, 0)

        def OBJECT(self):
            return self.getToken(Cobol85PreprocessorParser.OBJECT, 0)

        def ON(self):
            return self.getToken(Cobol85PreprocessorParser.ON, 0)

        def OF(self):
            return self.getToken(Cobol85PreprocessorParser.OF, 0)

        def OFF(self):
            return self.getToken(Cobol85PreprocessorParser.OFF, 0)

        def OFFSET(self):
            return self.getToken(Cobol85PreprocessorParser.OFFSET, 0)

        def OPMARGINS(self):
            return self.getToken(Cobol85PreprocessorParser.OPMARGINS, 0)

        def OPSEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.OPSEQUENCE, 0)

        def OPTIMIZE(self):
            return self.getToken(Cobol85PreprocessorParser.OPTIMIZE, 0)

        def OP(self):
            return self.getToken(Cobol85PreprocessorParser.OP, 0)

        def OPT(self):
            return self.getToken(Cobol85PreprocessorParser.OPT, 0)

        def OPTFILE(self):
            return self.getToken(Cobol85PreprocessorParser.OPTFILE, 0)

        def OPTIONS(self):
            return self.getToken(Cobol85PreprocessorParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(Cobol85PreprocessorParser.OUT, 0)

        def OUTDD(self):
            return self.getToken(Cobol85PreprocessorParser.OUTDD, 0)

        def PFD(self):
            return self.getToken(Cobol85PreprocessorParser.PFD, 0)

        def PGMN(self):
            return self.getToken(Cobol85PreprocessorParser.PGMN, 0)

        def PGMNAME(self):
            return self.getToken(Cobol85PreprocessorParser.PGMNAME, 0)

        def PPTDBG(self):
            return self.getToken(Cobol85PreprocessorParser.PPTDBG, 0)

        def PROCESS(self):
            return self.getToken(Cobol85PreprocessorParser.PROCESS, 0)

        def PROLOG(self):
            return self.getToken(Cobol85PreprocessorParser.PROLOG, 0)

        def QUOTE(self):
            return self.getToken(Cobol85PreprocessorParser.QUOTE, 0)

        def RENT(self):
            return self.getToken(Cobol85PreprocessorParser.RENT, 0)

        def REPLACING(self):
            return self.getToken(Cobol85PreprocessorParser.REPLACING, 0)

        def RMODE(self):
            return self.getToken(Cobol85PreprocessorParser.RMODE, 0)

        def SEQ(self):
            return self.getToken(Cobol85PreprocessorParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(Cobol85PreprocessorParser.SEQUENCE, 0)

        def SEP(self):
            return self.getToken(Cobol85PreprocessorParser.SEP, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85PreprocessorParser.SEPARATE, 0)

        def SHORT(self):
            return self.getToken(Cobol85PreprocessorParser.SHORT, 0)

        def SIZE(self):
            return self.getToken(Cobol85PreprocessorParser.SIZE, 0)

        def SOURCE(self):
            return self.getToken(Cobol85PreprocessorParser.SOURCE, 0)

        def SP(self):
            return self.getToken(Cobol85PreprocessorParser.SP, 0)

        def SPACE(self):
            return self.getToken(Cobol85PreprocessorParser.SPACE, 0)

        def SPIE(self):
            return self.getToken(Cobol85PreprocessorParser.SPIE, 0)

        def SQL(self):
            return self.getToken(Cobol85PreprocessorParser.SQL, 0)

        def SQLC(self):
            return self.getToken(Cobol85PreprocessorParser.SQLC, 0)

        def SQLCCSID(self):
            return self.getToken(Cobol85PreprocessorParser.SQLCCSID, 0)

        def SS(self):
            return self.getToken(Cobol85PreprocessorParser.SS, 0)

        def SSR(self):
            return self.getToken(Cobol85PreprocessorParser.SSR, 0)

        def SSRANGE(self):
            return self.getToken(Cobol85PreprocessorParser.SSRANGE, 0)

        def STD(self):
            return self.getToken(Cobol85PreprocessorParser.STD, 0)

        def SYSEIB(self):
            return self.getToken(Cobol85PreprocessorParser.SYSEIB, 0)

        def SZ(self):
            return self.getToken(Cobol85PreprocessorParser.SZ, 0)

        def TERM(self):
            return self.getToken(Cobol85PreprocessorParser.TERM, 0)

        def TERMINAL(self):
            return self.getToken(Cobol85PreprocessorParser.TERMINAL, 0)

        def TEST(self):
            return self.getToken(Cobol85PreprocessorParser.TEST, 0)

        def THREAD(self):
            return self.getToken(Cobol85PreprocessorParser.THREAD, 0)

        def TITLE(self):
            return self.getToken(Cobol85PreprocessorParser.TITLE, 0)

        def TRIG(self):
            return self.getToken(Cobol85PreprocessorParser.TRIG, 0)

        def TRUNC(self):
            return self.getToken(Cobol85PreprocessorParser.TRUNC, 0)

        def UE(self):
            return self.getToken(Cobol85PreprocessorParser.UE, 0)

        def UPPER(self):
            return self.getToken(Cobol85PreprocessorParser.UPPER, 0)

        def VBREF(self):
            return self.getToken(Cobol85PreprocessorParser.VBREF, 0)

        def WD(self):
            return self.getToken(Cobol85PreprocessorParser.WD, 0)

        def XMLPARSE(self):
            return self.getToken(Cobol85PreprocessorParser.XMLPARSE, 0)

        def XMLSS(self):
            return self.getToken(Cobol85PreprocessorParser.XMLSS, 0)

        def XOPTS(self):
            return self.getToken(Cobol85PreprocessorParser.XOPTS, 0)

        def XREF(self):
            return self.getToken(Cobol85PreprocessorParser.XREF, 0)

        def YEARWINDOW(self):
            return self.getToken(Cobol85PreprocessorParser.YEARWINDOW, 0)

        def YW(self):
            return self.getToken(Cobol85PreprocessorParser.YW, 0)

        def ZWB(self):
            return self.getToken(Cobol85PreprocessorParser.ZWB, 0)

        def C_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.C_CHAR, 0)

        def D_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.D_CHAR, 0)

        def E_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.E_CHAR, 0)

        def F_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.F_CHAR, 0)

        def H_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.H_CHAR, 0)

        def I_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.I_CHAR, 0)

        def M_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.M_CHAR, 0)

        def N_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.N_CHAR, 0)

        def Q_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.Q_CHAR, 0)

        def S_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.S_CHAR, 0)

        def U_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.U_CHAR, 0)

        def W_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.W_CHAR, 0)

        def X_CHAR(self):
            return self.getToken(Cobol85PreprocessorParser.X_CHAR, 0)

        def getRuleIndex(self):
            return Cobol85PreprocessorParser.RULE_charDataKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharDataKeyword" ):
                listener.enterCharDataKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharDataKeyword" ):
                listener.exitCharDataKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharDataKeyword" ):
                return visitor.visitCharDataKeyword(self)
            else:
                return visitor.visitChildren(self)




    def charDataKeyword(self):

        localctx = Cobol85PreprocessorParser.CharDataKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_charDataKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -2346375405893844994) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -16785409) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -288230376151711745) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -9534967251992577) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 100663159) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





